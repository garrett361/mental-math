{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/CurrentQuestion.js\";\nimport React, { Component } from 'react'; // Ramda\n\nimport * as R from 'ramda'; // Latex\n\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\nlet initialState = {\n  meterValue: null,\n  presetExponent: 1,\n  presetName: null\n};\n\nclass Presets extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handlePresetChange = event => {\n      let {\n        value\n      } = event.target; // find which  unit was selected\n\n      let {\n        presetsSet\n      } = this.props;\n      let presetsIndex = R.findIndex(R.propEq('name', value))(presetsSet);\n\n      if (presetsIndex !== -1) {\n        this.setState(presetsSet[presetsIndex].state);\n        this.setState({\n          presetName: value\n        });\n      }\n    };\n\n    this.handleChange = event => {\n      let {\n        name,\n        value\n      } = event.target; // The [ ] brackets here are the setState synatx\n\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    let {\n      number,\n      presetExponent,\n      presetName\n    } = this.state;\n    let {\n      handleSubmit,\n      presetsSet,\n      currentNumber\n    } = this.props; // preset options\n\n    let presetsFill = R.map((x, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: x.name,\n        name: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 53\n        }\n      }, x.name);\n    }, presetsSet); // Standardized factored latex output\n\n    let Latex = props => {\n      let {\n        input\n      } = props;\n      return /*#__PURE__*/React.createElement(InlineMath, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }, input);\n    }; // raising presets to a power, using that all units are in terms of meters\n\n\n    let presetExponentiator = (obj, exponent) => {\n      let output = R.clone(obj);\n      output.number = Math.pow(obj.number, exponent);\n      output.meterValue = 1;\n      output.units = 'm';\n      output.unitsExponent = exponent;\n      output.overallExponent = 1;\n      let presetsIndex = R.findIndex(R.propEq('name', this.state.presetName))(this.props.presetsSet);\n      output.latex = presetsSet[presetsIndex].latex;\n      return output;\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, \"Presets \", currentNumber, \" \"), /*#__PURE__*/React.createElement(InlineMath, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, currentNumber), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"unitsPreset\",\n      id: \"unitsPreset\",\n      value: presetName || '',\n      onChange: this.handlePresetChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }), presetsFill), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, \"Exponent\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"presetExponent\",\n      id: \"presetExponent\",\n      value: presetExponent || '',\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Submit\",\n      onClick: () => {\n        if (!number) {\n          alert('Please choose a quantity');\n          this.setState(initialState);\n        } else if (Number(presetExponent) === 0) {\n          alert('Please choose a non-zero exponent');\n          this.setState(initialState);\n        } else {\n          handleSubmit(presetExponentiator(this.state, presetExponent));\n          this.setState(initialState);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Presets;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/CurrentQuestion.js"],"names":["React","Component","R","InlineMath","initialState","meterValue","presetExponent","presetName","Presets","state","handlePresetChange","event","value","target","presetsSet","props","presetsIndex","findIndex","propEq","setState","handleChange","name","render","number","handleSubmit","currentNumber","presetsFill","map","x","i","Latex","input","presetExponentiator","obj","exponent","output","clone","Math","pow","units","unitsExponent","overallExponent","latex","alert","Number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n\nlet initialState = {\n    meterValue: null,\n    presetExponent: 1,\n    presetName: null,\n};\n\nclass Presets extends Component {\n\n    state = initialState;\n\n    // event handlers\n    handlePresetChange = event => {\n        let { value } = event.target;\n        // find which  unit was selected\n        let { presetsSet } = this.props;\n        let presetsIndex = R.findIndex(R.propEq('name', value))(presetsSet);\n        if (presetsIndex !== -1) {\n            this.setState(\n                presetsSet[presetsIndex].state\n            );\n            this.setState(\n                { presetName: value }\n            );\n        }\n    }\n\n    handleChange = event => {\n        let { name, value } = event.target\n        // The [ ] brackets here are the setState synatx\n        this.setState({\n            [name]: value,\n        })\n    }\n\n\n\n\n\n\n    render() {\n\n        let { number, presetExponent, presetName } = this.state;\n        let { handleSubmit, presetsSet, currentNumber } = this.props;\n\n\n        // preset options\n        let presetsFill = R.map((x, i) => { return (<option key={x.name} name={i}>{x.name}</option>) }, presetsSet);\n\n\n        \n// Standardized factored latex output\n\nlet Latex = (props) => {\n    let { input } = props;\n  \n    return (\n      <InlineMath>\n        {input}\n      </InlineMath>\n    );\n  };\n\n\n        // raising presets to a power, using that all units are in terms of meters\n        let presetExponentiator = (obj, exponent) => {\n\n            let output = R.clone(obj);\n            output.number = Math.pow(obj.number, exponent);\n            output.meterValue = 1;\n            output.units = 'm';\n            output.unitsExponent = exponent;\n            output.overallExponent = 1;\n            let presetsIndex = R.findIndex(R.propEq('name', this.state.presetName))(this.props.presetsSet);\n            output.latex = presetsSet[presetsIndex].latex;\n            return (output)\n\n        }\n\n\n        return (\n\n            <div>\n                <form>\n                    <label>Presets {currentNumber} </label>\n                    <InlineMath>{currentNumber}</InlineMath>\n                    <select\n                        name=\"unitsPreset\"\n                        id=\"unitsPreset\"\n                        value={presetName || ''}\n                        onChange={this.handlePresetChange}\n                    >\n                        <option value=\"\"></option>\n                        {presetsFill}\n                    </select>\n\n                    <label>Exponent</label>\n                    <input\n                        type=\"number\"\n                        name=\"presetExponent\"\n                        id=\"presetExponent\"\n                        value={presetExponent || ''}\n                        onChange={this.handleChange}\n                    />\n                </form>\n\n                <input\n                    type=\"button\"\n                    value=\"Submit\"\n                    onClick={() => {\n                        if (!number) {\n                            alert('Please choose a quantity');\n                            this.setState(initialState);\n                        } else if (Number(presetExponent) === 0) {\n                            alert('Please choose a non-zero exponent');\n                            this.setState(initialState);\n                        }\n                        else {\n                            handleSubmit(\n                                presetExponentiator(this.state, presetExponent)\n                            );\n                            this.setState(initialState);\n                        }\n                    }\n                    }\n                />\n\n            </div>\n        )\n    }\n\n}\n\n\nexport default Presets"]},"metadata":{},"sourceType":"module"}