{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/History.js\";\nimport React from 'react'; // Ramda\n\nimport * as R from 'ramda'; // Latex\n\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex'; // Create a fuction to separate exponential notation numbers into a prefactor and an exponent\n\nlet exponentSeparate = x => {\n  let numx = Number(x).toExponential();\n  let regexpDigit = /[e]/;\n  let result = {};\n  result.number = numx.slice(0, regexpDigit.exec(numx).index);\n  result.numberExponent = numx.slice(regexpDigit.exec(numx).index + 1, numx.length);\n  return [Number(result.number).toPrecision(3), Number(result.numberExponent)];\n}; // Standardized latex output\n\n\nlet LatexOutput = props => {\n  let {\n    input\n  } = props;\n\n  if (input.latex) {\n    if (Number(input.unitsExponent) !== 1) {\n      return /*#__PURE__*/React.createElement(InlineMath, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, input.latex + '^{' + input.unitsExponent + '}');\n    } else {\n      return /*#__PURE__*/React.createElement(InlineMath, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, input.latex);\n    }\n\n    ;\n  } else {\n    let numbersplit = exponentSeparate(input.number);\n    let tenpower = '';\n\n    if (numbersplit[1]) {\n      tenpower = '\\\\times 10^{' + numbersplit[1] + '}';\n    }\n\n    let unitfactor = '';\n\n    if (input.units !== 'GN') {\n      if (Number(input.unitsExponent) && input.units) {\n        if (Number(input.unitsExponent) !== 1) {\n          unitfactor = '\\\\  \\\\mathrm{' + input.units + '} ^{' + input.unitsExponent + '}';\n        } else {\n          unitfactor = '\\\\  \\\\mathrm{' + input.units + '}';\n        }\n\n        ;\n      }\n    }\n\n    if (input.overallExponent && input.overallExponent !== 1) {\n      return /*#__PURE__*/React.createElement(InlineMath, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }, '\\\\left(' + numbersplit[0] + tenpower + unitfactor + '\\\\right)^{' + input.overallExponent + '}');\n    } else {\n      return /*#__PURE__*/React.createElement(InlineMath, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, numbersplit[0] + tenpower + unitfactor);\n    }\n\n    ;\n  }\n\n  ;\n}; // Standardized factored latex output\n\n\nlet LatexOutputFactored = props => {\n  let {\n    input\n  } = props;\n  let numbersplit = exponentSeparate(input.number);\n  let tenpower = '';\n\n  if (Number(numbersplit[1])) {\n    tenpower = '\\\\times 10^{' + numbersplit[1] + '}';\n  }\n\n  let unitfactor = '';\n\n  if (Number(input.unitsExponent)) {\n    unitfactor = '\\\\  \\\\mathrm{' + input.units + '}';\n  }\n\n  return /*#__PURE__*/React.createElement(InlineMath, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, ' \\\\left (' + numbersplit[0] + tenpower + unitfactor + ' \\\\right) ^{' + input.unitsExponent + '}');\n}; // Standardized latex input, takes input *array* and organizes latex vs non-latex components to display nicely\n\n\nlet LatexInput = props => {\n  let {\n    input\n  } = props; // Split into latexed and non-latex parts\n\n  let inputLatex = R.filter(R.has('latex'), input);\n  let inputNonLatex = R.difference(input, inputLatex); // Then format the latexed output\n\n  let inputLatexNumerator = R.filter(x => x.presetExponent > 0, inputLatex);\n  let inputLatexDenominator = R.filter(x => x.presetExponent < 0, inputLatex); // reduce function for latexing\n\n  let latexReduce = (a, b) => {\n    if (Math.abs(b.presetExponent) === 1) {\n      return a + ' ' + b.latex;\n    } else {\n      return a + ' ' + b.latex + '^{' + Math.abs(b.presetExponent) + '}';\n    }\n  };\n\n  let inputLatexNumeratorConcat = R.reduce(latexReduce, '', inputLatexNumerator);\n  let inputLatexDenominatorConcat = R.reduce(latexReduce, '', inputLatexDenominator); // Final output for latexed presets:\n\n  let latexFinal = '';\n\n  if (inputLatexDenominatorConcat && inputLatexNumeratorConcat) {\n    latexFinal = '\\\\frac{' + inputLatexNumeratorConcat + '}{' + inputLatexDenominatorConcat + '}';\n  } else if (inputLatexDenominatorConcat && !inputLatexNumeratorConcat) {\n    latexFinal = '\\\\frac{1}{' + inputLatexDenominatorConcat + '}';\n  } else {\n    latexFinal = inputLatexNumeratorConcat;\n  }\n\n  let latexFinalFill = /*#__PURE__*/React.createElement(\"li\", {\n    key: 'latex',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(InlineMath, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 42\n    }\n  }, latexFinal)); // Output for non-latexed inputs\n\n  let inputNonLatexFill = inputNonLatex.map((x, i) => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LatexOutput, {\n      input: x,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }));\n  });\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"no-li-marks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, inputNonLatexFill, /*#__PURE__*/React.createElement(\"li\", {\n    key: 'blank',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), latexFinalFill);\n}; // Multiplying together all meters values input array and turning into a single number, exponent pair.\n// Final output is has number and meterPower properties and corresponds to a number\n// of the form #=(number)*m^{meterPower}\n\n\nlet meterValues = array => {\n  let output = {};\n  console.log(array);\n  output.number = R.reduce((a, b) => {\n    return Math.pow(Number(b.number) * Math.pow(b.meterValue, -b.unitsExponent / b.meterExponent), b.overallExponent) * a;\n  }, 1, array).toExponential();\n  output.meterPower = R.reduce((a, b) => {\n    return b.unitsExponent / b.meterExponent * b.overallExponent + a;\n  }, 0, array);\n  console.log(output);\n  return output;\n}; // Converting output to desired units\n\n\nlet unitConvertor = (input, outputUnit, unitsSet) => {\n  // find which  unit was selected\n  let unitIndex = R.findIndex(R.propEq('units', outputUnit))(unitsSet);\n  let finalUnit = unitsSet[unitIndex];\n  let output = {};\n  output.number = (meterValues(input).number * Math.pow(finalUnit.meterValue, meterValues(input).meterPower)).toExponential();\n  output.unitsExponent = finalUnit.meterExponent * meterValues(input).meterPower;\n  output.units = outputUnit;\n  return output;\n}; // Same as above, but factorized\n\n\nlet unitConvertorFactored = (input, outputUnit, unitsSet) => {\n  // convert input as above\n  let convertedInput = unitConvertor(input, outputUnit, unitsSet);\n  let output = {};\n\n  if (convertedInput.unitsExponent) {\n    output.number = Math.pow(convertedInput.number, 1 / convertedInput.unitsExponent).toExponential();\n    output.unitsExponent = convertedInput.unitsExponent;\n    output.units = outputUnit;\n    return output;\n  } else {\n    return output;\n  }\n\n  ;\n};\n\nlet OutputTable = props => {\n  let {\n    input,\n    unitsSet,\n    handleOutputUnitChange,\n    outputUnit,\n    handleReset,\n    GNis1,\n    handleGNis1Toggle\n  } = props;\n  let outputInFinalUnits = unitConvertor(input, outputUnit, unitsSet);\n  let outputInFinalUnitsFactored = unitConvertorFactored(input, outputUnit, unitsSet); // Units options\n\n  let unitsFill = R.map(x => {\n    if (x.units === 'GN') {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: x.units,\n        value: x.units,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 87\n        }\n      }, x.units);\n    }\n  }, unitsSet); // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: 'checkbox',\n    checked: GNis1,\n    onChange: handleGNis1Toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }), \"\\\\(\\\\ G_N=1\\\\)\"), !GNis1 && /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, \"Output Unit \"), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"outputUnit\",\n    id: \"outputUnit\",\n    value: outputUnit ? outputUnit : undefined,\n    onChange: handleOutputUnitChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 11\n    }\n  }, unitsFill)), input[0] && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, \"Input Factors\"), /*#__PURE__*/React.createElement(LatexInput, {\n    input: input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, \"Net Result\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"no-li-marks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LatexOutput, {\n    input: outputInFinalUnits,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  }), outputInFinalUnits.unitsExponent !== 1 && outputInFinalUnits.unitsExponent !== 0 && outputInFinalUnits.units !== 'GN' && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InlineMath, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 19\n    }\n  }, \"=\"), /*#__PURE__*/React.createElement(LatexOutputFactored, {\n    input: outputInFinalUnitsFactored,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Reset\",\n    onClick: () => {\n      handleReset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default OutputTable;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/History.js"],"names":["React","R","InlineMath","exponentSeparate","x","numx","Number","toExponential","regexpDigit","result","number","slice","exec","index","numberExponent","length","toPrecision","LatexOutput","props","input","latex","unitsExponent","numbersplit","tenpower","unitfactor","units","overallExponent","LatexOutputFactored","LatexInput","inputLatex","filter","has","inputNonLatex","difference","inputLatexNumerator","presetExponent","inputLatexDenominator","latexReduce","a","b","Math","abs","inputLatexNumeratorConcat","reduce","inputLatexDenominatorConcat","latexFinal","latexFinalFill","inputNonLatexFill","map","i","meterValues","array","output","console","log","pow","meterValue","meterExponent","meterPower","unitConvertor","outputUnit","unitsSet","unitIndex","findIndex","propEq","finalUnit","unitConvertorFactored","convertedInput","OutputTable","handleOutputUnitChange","handleReset","GNis1","handleGNis1Toggle","outputInFinalUnits","outputInFinalUnitsFactored","unitsFill","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n// Create a fuction to separate exponential notation numbers into a prefactor and an exponent\nlet exponentSeparate = (x) => {\n  let numx = Number(x).toExponential();\n  let regexpDigit = /[e]/;\n  let result = {};\n  result.number = numx.slice(0, regexpDigit.exec(numx).index);\n  result.numberExponent = numx.slice(regexpDigit.exec(numx).index + 1, numx.length);\n  return ([Number(result.number).toPrecision(3), Number(result.numberExponent)]);\n};\n\n\n\n\n// Standardized latex output\nlet LatexOutput = (props) => {\n  let { input } = props;\n  if (input.latex) {\n    if (Number(input.unitsExponent) !== 1) {\n      return (\n        <InlineMath>\n          {input.latex + '^{' + input.unitsExponent + '}'}\n        </InlineMath>\n      );\n    } else {\n      return (\n        <InlineMath>\n          {input.latex}\n        </InlineMath>\n      );\n    };\n  } else {\n    let numbersplit = exponentSeparate(input.number);\n    let tenpower = '';\n    if (numbersplit[1]) {\n      tenpower = '\\\\times 10^{' + numbersplit[1] + '}';\n    }\n    let unitfactor = '';\n    if (input.units !== 'GN') {\n      if (Number(input.unitsExponent) && input.units) {\n        if (Number(input.unitsExponent) !== 1) {\n          unitfactor = '\\\\  \\\\mathrm{' + input.units + '} ^{' + input.unitsExponent + '}';\n        } else {\n          unitfactor = '\\\\  \\\\mathrm{' + input.units + '}';\n        };\n      }\n    }\n\n    if (input.overallExponent && input.overallExponent !== 1) {\n      return (\n        <InlineMath>\n          {'\\\\left(' + numbersplit[0] + tenpower + unitfactor + '\\\\right)^{' + input.overallExponent + '}'}\n        </InlineMath>\n      )\n    } else {\n      return (\n        <InlineMath>\n          {numbersplit[0] + tenpower + unitfactor}\n        </InlineMath>\n      );\n    };\n  };\n};\n\n\n// Standardized factored latex output\n\nlet LatexOutputFactored = (props) => {\n  let { input } = props;\n  let numbersplit = exponentSeparate(input.number);\n  let tenpower = '';\n  if (Number(numbersplit[1])) {\n    tenpower = '\\\\times 10^{' + numbersplit[1] + '}';\n  }\n  let unitfactor = '';\n  if (Number(input.unitsExponent)) {\n    unitfactor = '\\\\  \\\\mathrm{' + input.units + '}';\n  }\n\n  return (\n    <InlineMath>\n      {' \\\\left (' + numbersplit[0] + tenpower + unitfactor + ' \\\\right) ^{' + input.unitsExponent + '}'}\n    </InlineMath>\n  );\n};\n\n// Standardized latex input, takes input *array* and organizes latex vs non-latex components to display nicely\nlet LatexInput = (props) => {\n  let { input } = props;\n  // Split into latexed and non-latex parts\n  let inputLatex = R.filter(R.has('latex'), input);\n  let inputNonLatex = R.difference(input, inputLatex);\n\n  // Then format the latexed output\n  let inputLatexNumerator = R.filter(x => x.presetExponent > 0, inputLatex);\n  let inputLatexDenominator = R.filter(x => x.presetExponent < 0, inputLatex);\n  // reduce function for latexing\n  let latexReduce = (a, b) => {\n    if (Math.abs(b.presetExponent) === 1) {\n      return (a + ' ' + b.latex)\n    } else {\n      return (a + ' ' + b.latex + '^{' + Math.abs(b.presetExponent) + '}')\n    }\n  }\n\n  let inputLatexNumeratorConcat = R.reduce(latexReduce, '', inputLatexNumerator);\n  let inputLatexDenominatorConcat = R.reduce(latexReduce, '', inputLatexDenominator);\n\n  // Final output for latexed presets:\n  let latexFinal = ''\n  if (inputLatexDenominatorConcat && inputLatexNumeratorConcat) {\n    latexFinal = '\\\\frac{' + inputLatexNumeratorConcat + '}{' + inputLatexDenominatorConcat + '}';\n  } else if (inputLatexDenominatorConcat && !inputLatexNumeratorConcat) {\n    latexFinal = '\\\\frac{1}{' + inputLatexDenominatorConcat + '}';\n  } else {\n    latexFinal = inputLatexNumeratorConcat;\n  }\n\n  let latexFinalFill = <li key={'latex'}><InlineMath>{latexFinal}</InlineMath></li>;\n\n  // Output for non-latexed inputs\n  let inputNonLatexFill = inputNonLatex.map((x, i) => {\n    return (\n      <li key={i}>\n        <LatexOutput\n          input={x}\n        />\n      </li>\n    )\n  });\n\n\n  return (\n    <ul className={\"no-li-marks\"}>\n      {inputNonLatexFill}\n      <li key={'blank'}></li>\n      {latexFinalFill}\n    </ul>\n  );\n\n};\n\n\n// Multiplying together all meters values input array and turning into a single number, exponent pair.\n// Final output is has number and meterPower properties and corresponds to a number\n// of the form #=(number)*m^{meterPower}\nlet meterValues = (array) => {\n  let output = {};\n  console.log(array);\n  output.number = R.reduce((a, b) => { return (Math.pow((Number(b.number) * Math.pow(b.meterValue, -b.unitsExponent / b.meterExponent)), b.overallExponent) * a) }, 1, array).toExponential()\n  output.meterPower = R.reduce((a, b) => { return (b.unitsExponent / b.meterExponent * b.overallExponent + a) }, 0, array);\n  console.log(output);\n  return (\n    output\n  );\n};\n\n\n\n// Converting output to desired units\nlet unitConvertor = (input, outputUnit, unitsSet) => {\n  // find which  unit was selected\n  let unitIndex = R.findIndex(R.propEq('units', outputUnit))(unitsSet);\n  let finalUnit = unitsSet[unitIndex];\n  let output = {};\n  output.number = ((meterValues(input).number) * Math.pow(finalUnit.meterValue, meterValues(input).meterPower)).toExponential();\n  output.unitsExponent = finalUnit.meterExponent * meterValues(input).meterPower;\n  output.units = outputUnit;\n  return (output);\n};\n// Same as above, but factorized\nlet unitConvertorFactored = (input, outputUnit, unitsSet) => {\n  // convert input as above\n  let convertedInput = unitConvertor(input, outputUnit, unitsSet)\n  let output = {};\n  if (convertedInput.unitsExponent) {\n    output.number = Math.pow(convertedInput.number, 1 / convertedInput.unitsExponent).toExponential();\n    output.unitsExponent = convertedInput.unitsExponent;\n    output.units = outputUnit;\n    return (\n      output\n    );\n  } else {\n    return (output)\n  };\n};\n\nlet OutputTable = (props) => {\n\n  let { input, unitsSet, handleOutputUnitChange, outputUnit, handleReset, GNis1, handleGNis1Toggle } = props;\n\n  let outputInFinalUnits = unitConvertor(input, outputUnit, unitsSet);\n  let outputInFinalUnitsFactored = unitConvertorFactored(input, outputUnit, unitsSet);\n\n\n  // Units options\n  let unitsFill = R.map((x) => { if (x.units === 'GN') { return null } else { return (<option key={x.units} value={x.units}>{x.units}</option>) } }, unitsSet);\n\n\n  // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n\n\n\n\n  return (\n    <div>\n      <label>\n        <input\n          type={'checkbox'}\n          checked={GNis1}\n          onChange={handleGNis1Toggle} />\n      \\(\\ G_N=1\\)\n      </label>\n      {!GNis1 &&\n        <form>\n          <label>Output Unit </label>\n          <select\n            name=\"outputUnit\"\n            id=\"outputUnit\"\n            value={outputUnit ? outputUnit : undefined}\n            onChange={handleOutputUnitChange}\n          >\n            {unitsFill}\n          </select>\n        </form>\n      }\n\n\n\n      {input[0]\n        &&\n        <div>\n          <h4>\n            Input Factors\n           </h4>\n          <LatexInput\n            input={input}\n          />\n\n          <h4>\n            Net Result\n           </h4>\n          <ul className={\"no-li-marks\"}>\n            <li>\n              <LatexOutput\n                input={outputInFinalUnits}\n              />\n              {outputInFinalUnits.unitsExponent !== 1 && outputInFinalUnits.unitsExponent !== 0 && outputInFinalUnits.units !== 'GN'\n                &&\n                <span>\n                  <InlineMath>\n                    =\n              </InlineMath>\n                  <LatexOutputFactored\n                    input={outputInFinalUnitsFactored}\n                  />\n                </span>\n              }\n            </li>\n          </ul>\n\n          <input\n            type=\"button\"\n            value=\"Reset\"\n            onClick={() => {\n              handleReset()\n            }\n            }\n          />\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default OutputTable"]},"metadata":{},"sourceType":"module"}