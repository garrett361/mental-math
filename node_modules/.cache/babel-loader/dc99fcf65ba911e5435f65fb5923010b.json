{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/CurrentQuestion.js\";\nimport React, { Component } from 'react'; // Ramda\n\nimport * as R from 'ramda';\nlet initialState = {\n  meterValue: null,\n  presetExponent: 1,\n  presetName: null\n};\n\nclass Presets extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n  }\n\n  render() {\n    let {\n      number,\n      presetExponent,\n      presetName\n    } = this.state;\n    let {\n      handleSubmit,\n      presetsSet,\n      currentNumber\n    } = this.props; // preset options\n\n    let presetsFill = R.map((x, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: x.name,\n        name: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 53\n        }\n      }, x.name);\n    }, presetsSet); // Standardized factored latex output\n\n    let Latex = props => {\n      let {\n        input\n      } = props;\n      return /*#__PURE__*/React.createElement(InlineMath, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, input);\n    }; // raising presets to a power, using that all units are in terms of meters\n\n\n    let presetExponentiator = (obj, exponent) => {\n      let output = R.clone(obj);\n      output.number = Math.pow(obj.number, exponent);\n      output.meterValue = 1;\n      output.units = 'm';\n      output.unitsExponent = exponent;\n      output.overallExponent = 1;\n      let presetsIndex = R.findIndex(R.propEq('name', this.state.presetName))(this.props.presetsSet);\n      output.latex = presetsSet[presetsIndex].latex;\n      return output;\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Presets;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/CurrentQuestion.js"],"names":["React","Component","R","initialState","meterValue","presetExponent","presetName","Presets","state","render","number","handleSubmit","presetsSet","currentNumber","props","presetsFill","map","x","i","name","Latex","input","presetExponentiator","obj","exponent","output","clone","Math","pow","units","unitsExponent","overallExponent","presetsIndex","findIndex","propEq","latex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AAIA,IAAIC,YAAY,GAAG;AACfC,EAAAA,UAAU,EAAE,IADG;AAEfC,EAAAA,cAAc,EAAE,CAFD;AAGfC,EAAAA,UAAU,EAAE;AAHG,CAAnB;;AAMA,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAE5BO,KAF4B,GAEpBL,YAFoB;AAAA;;AAM5BM,EAAAA,MAAM,GAAG;AAEL,QAAI;AAAEC,MAAAA,MAAF;AAAUL,MAAAA,cAAV;AAA0BC,MAAAA;AAA1B,QAAyC,KAAKE,KAAlD;AACA,QAAI;AAAEG,MAAAA,YAAF;AAAgBC,MAAAA,UAAhB;AAA4BC,MAAAA;AAA5B,QAA8C,KAAKC,KAAvD,CAHK,CAML;;AACA,QAAIC,WAAW,GAAGb,CAAC,CAACc,GAAF,CAAM,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAE,0BAAQ;AAAQ,QAAA,GAAG,EAAED,CAAC,CAACE,IAAf;AAAqB,QAAA,IAAI,EAAED,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BD,CAAC,CAACE,IAAjC,CAAR;AAA0D,KAA5E,EAA8EP,UAA9E,CAAlB,CAPK,CAWb;;AAEA,QAAIQ,KAAK,GAAIN,KAAD,IAAW;AACnB,UAAI;AAAEO,QAAAA;AAAF,UAAYP,KAAhB;AAEA,0BACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGO,KADH,CADF;AAKD,KARH,CAba,CAwBL;;;AACA,QAAIC,mBAAmB,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAEzC,UAAIC,MAAM,GAAGvB,CAAC,CAACwB,KAAF,CAAQH,GAAR,CAAb;AACAE,MAAAA,MAAM,CAACf,MAAP,GAAgBiB,IAAI,CAACC,GAAL,CAASL,GAAG,CAACb,MAAb,EAAqBc,QAArB,CAAhB;AACAC,MAAAA,MAAM,CAACrB,UAAP,GAAoB,CAApB;AACAqB,MAAAA,MAAM,CAACI,KAAP,GAAe,GAAf;AACAJ,MAAAA,MAAM,CAACK,aAAP,GAAuBN,QAAvB;AACAC,MAAAA,MAAM,CAACM,eAAP,GAAyB,CAAzB;AACA,UAAIC,YAAY,GAAG9B,CAAC,CAAC+B,SAAF,CAAY/B,CAAC,CAACgC,MAAF,CAAS,MAAT,EAAiB,KAAK1B,KAAL,CAAWF,UAA5B,CAAZ,EAAqD,KAAKQ,KAAL,CAAWF,UAAhE,CAAnB;AACAa,MAAAA,MAAM,CAACU,KAAP,GAAevB,UAAU,CAACoB,YAAD,CAAV,CAAyBG,KAAxC;AACA,aAAQV,MAAR;AAEH,KAZD;;AAeA,wBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAKH;;AAnD2B;;AAwDhC,eAAelB,OAAf","sourcesContent":["import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n\n\nlet initialState = {\n    meterValue: null,\n    presetExponent: 1,\n    presetName: null,\n};\n\nclass Presets extends Component {\n\n    state = initialState;\n\n\n\n    render() {\n\n        let { number, presetExponent, presetName } = this.state;\n        let { handleSubmit, presetsSet, currentNumber } = this.props;\n\n\n        // preset options\n        let presetsFill = R.map((x, i) => { return (<option key={x.name} name={i}>{x.name}</option>) }, presetsSet);\n\n\n        \n// Standardized factored latex output\n\nlet Latex = (props) => {\n    let { input } = props;\n  \n    return (\n      <InlineMath>\n        {input}\n      </InlineMath>\n    );\n  };\n\n\n        // raising presets to a power, using that all units are in terms of meters\n        let presetExponentiator = (obj, exponent) => {\n\n            let output = R.clone(obj);\n            output.number = Math.pow(obj.number, exponent);\n            output.meterValue = 1;\n            output.units = 'm';\n            output.unitsExponent = exponent;\n            output.overallExponent = 1;\n            let presetsIndex = R.findIndex(R.propEq('name', this.state.presetName))(this.props.presetsSet);\n            output.latex = presetsSet[presetsIndex].latex;\n            return (output)\n\n        }\n\n\n        return (\n\n            <div>\n            </div>\n        );\n    };\n\n}\n\n\nexport default Presets"]},"metadata":{},"sourceType":"module"}