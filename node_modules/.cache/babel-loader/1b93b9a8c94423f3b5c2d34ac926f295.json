{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/CurrentQuestion.js\";\nimport React, { Component } from 'react'; // Ramda\n\nimport * as R from 'ramda'; // Latex\n\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\nlet initialState = {\n  guess: null\n};\n\nclass CurrentQuestion extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleChange = event => {\n      let {\n        name,\n        value\n      } = event.target; // The [ ] brackets here are the setState synatx\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.questionType = (randInt1, randInt2, qtype) => {\n      // Multiplication\n      if (qtype == 0) {\n        let factorMax = 250; // Max possible mult. factor\n\n        let randFactor1 = Math.floor(randInt1 * factorMax);\n        let randFactor2 = Math.floor(randInt2 * factorMax);\n        let answer = randFactor1 * randFactor2;\n        let latex = /*#__PURE__*/React.createElement(InlineMath, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 25\n          }\n        }, randFactor1 + ' \\\\times ' + randFactor2);\n        return [answer, latex];\n      } // Division\n\n\n      if (qtype == 1) {\n        let numMax = 1000; // Max possible numerato. factor\n\n        let denomMax = 100; // Max possible denominator factor\n\n        let randFactor1 = Math.floor(randInt1 * numMax);\n        let randFactor2 = Math.floor(randInt2 * denomMax);\n        let answer = Math.round(randFactor1 / randFactor2);\n        let latex = /*#__PURE__*/React.createElement(InlineMath, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }\n        }, randFactor1 + ' \\\\div ' + randFactor2);\n        return [answer, latex];\n      }\n    };\n  }\n\n  render() {\n    let {\n      guess\n    } = this.state;\n    let {\n      handleSubmit,\n      currentQuestionType,\n      randInt1,\n      randInt2\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, this.questionType(randInt1, randInt2, currentQuestionType)[1]), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, \"Guess\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"guess\",\n      id: \"guess\",\n      value: guess || '',\n      onChange: this.handleChange,\n      autoFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Submit\",\n      onClick: () => {\n        if (guess) {\n          handleSubmit(this.questionType(randInt1, randInt2, currentQuestionType)[0], this.state.guess, this.questionType(randInt1, randInt2, currentQuestionType)[0]);\n          this.setState(initialState);\n        } else {\n          alert('Please enter a number');\n          this.setState(initialState);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default CurrentQuestion;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/CurrentQuestion.js"],"names":["React","Component","R","InlineMath","initialState","guess","CurrentQuestion","state","handleChange","event","name","value","target","setState","questionType","randInt1","randInt2","qtype","factorMax","randFactor1","Math","floor","randFactor2","answer","latex","numMax","denomMax","round","render","handleSubmit","currentQuestionType","props","alert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n\n\nlet initialState = {\n    guess: null,\n};\n\nclass CurrentQuestion extends Component {\n\n    state = initialState;\n\n\n    handleChange = event => {\n        let { name, value } = event.target\n        // The [ ] brackets here are the setState synatx\n        this.setState({\n            [name]: value,\n        })\n    };\n\n    questionType = ( randInt1, randInt2, qtype) => {\n\n        // Multiplication\n        if (qtype == 0) {\n            let factorMax = 250; // Max possible mult. factor\n            let randFactor1 = Math.floor(randInt1 * factorMax);\n            let randFactor2 = Math.floor(randInt2 * factorMax);\n            let answer = randFactor1 * randFactor2;\n            let latex = <InlineMath>\n                {randFactor1 + ' \\\\times ' + randFactor2}\n          </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        }\n\n\n        // Division\n        if (qtype == 1) {\n            let numMax = 1000; // Max possible numerato. factor\n            let denomMax = 100; // Max possible denominator factor\n            let randFactor1 = Math.floor(randInt1 * numMax);\n            let randFactor2 = Math.floor(randInt2 * denomMax);\n            let answer = Math.round(randFactor1 / randFactor2);\n            let latex = <InlineMath>\n                {randFactor1 + ' \\\\div ' + randFactor2}\n          </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        }\n    };\n\n    render() {\n\n        let { guess } = this.state;\n        let { handleSubmit, currentQuestionType,randInt1,randInt2 } = this.props;\n\n\n\n        return (\n\n            <div>\n\n                <h4>\n                    {this.questionType(randInt1,randInt2, currentQuestionType)[1]}\n                </h4>\n\n                <form>\n\n\n\n                    <label>Guess</label>\n                    <input\n                        type=\"number\"\n                        name=\"guess\"\n                        id=\"guess\"\n                        value={guess || ''}\n                        onChange={this.handleChange}\n                        autoFocus />\n\n\n                </form>\n\n                <input\n                    type=\"button\"\n                    value=\"Submit\"\n                    onClick={() => {\n                        if (guess) {\n                            handleSubmit(\n                                this.questionType(randInt1,randInt2,  currentQuestionType)[0],\n                                this.state.guess,\n                                this.questionType(randInt1,randInt2, currentQuestionType)[0],\n                            );\n                            this.setState(initialState);\n                        }\n                        else {\n                            alert('Please enter a number');\n                            this.setState(initialState);\n                        }\n                    }\n                    }\n                />\n                \n\n            </div>\n        );\n    };\n\n}\n\n\nexport default CurrentQuestion"]},"metadata":{},"sourceType":"module"}