{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/History.js\";\nimport React from 'react'; // Ramda\n\nimport * as R from 'ramda'; // Latex\n\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex'; // Static table header\n\nlet TableHeader = () => {\n  return /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 15\n    }\n  }, \"Previous Question\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }, \"Answer\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 15\n    }\n  }, \"Guess\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 15\n    }\n  }, \"Error\")));\n};\n\nconst TableBodyUnique = props => {\n  // Take min, max, length data and turn it into min, max, random string data\n  // output integer between xmin and xmax:\n  function randminmax(xmin, xmax) {\n    return Math.round(Math.random() * Math.abs(Number(xmax) - Number(xmin))) + Number(xmin);\n  } // Create an array of n *unique* random integers between xmin and xmas\n\n\n  function randlistunique(n, xmin, xmax) {\n    var i;\n    var l = [];\n    var x;\n\n    if (n > xmax - xmin + 1) {\n      return \"Error: Length too long for range\";\n    } else {\n      for (i = 0; i < n; i++) {\n        x = randminmax(xmin, xmax);\n\n        while (l.includes(x)) {\n          x = randminmax(xmin, xmax);\n        }\n\n        l.push(x);\n      }\n\n      var lstring;\n      lstring = l.toString();\n      return lstring;\n    }\n  } // Same as randarray, but only generates unique elements in the randomized list\n\n\n  const randarrayunique = props.input.map(x1 => ({\n    min: x1.min,\n    max: x1.max,\n    rand: randlistunique(x1.length, x1.min, x1.max)\n  })); // same for unique randoms\n\n  const rowsunique = randarrayunique.map((x1, x2) => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: x2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, x1.min), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, x1.max), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, x1.rand), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => props.deleteRow(x2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"Delete\")));\n  });\n  return /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, rowsunique);\n};\n\nlet History = props => {\n  let {\n    previousLatex,\n    prevoiusAnswers,\n    previousGuesses\n  } = props;\n  let outputInFinalUnits = unitConvertor(input, outputUnit, unitsSet);\n  let outputInFinalUnitsFactored = unitConvertorFactored(input, outputUnit, unitsSet); // Units options\n\n  let unitsFill = R.map(x => {\n    if (x.units === 'GN') {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: x.units,\n        value: x.units,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 87\n        }\n      }, x.units);\n    }\n  }, unitsSet); // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n  // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TableBodyUnique, {\n    input: input,\n    deleteRow: deleteRow,\n    uniquetoggle: uniquetoggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default History;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/History.js"],"names":["React","R","InlineMath","TableHeader","TableBodyUnique","props","randminmax","xmin","xmax","Math","round","random","abs","Number","randlistunique","n","i","l","x","includes","push","lstring","toString","randarrayunique","input","map","x1","min","max","rand","length","rowsunique","x2","deleteRow","History","previousLatex","prevoiusAnswers","previousGuesses","outputInFinalUnits","unitConvertor","outputUnit","unitsSet","outputInFinalUnitsFactored","unitConvertorFactored","unitsFill","units","uniquetoggle"],"mappings":"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","sourcesContent":["import React from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n  // Static table header\n\n\n  let TableHeader = () => {\n    return (\n        <thead>\n            <tr>    \n              <th>Previous Question</th>\n              <th>Answer</th>\n              <th>Guess</th>\n              <th>Error</th>\n            </tr>\n        </thead>\n    )\n  }\n\n\n\n\nconst TableBodyUnique = props => {\n\n\n  // Take min, max, length data and turn it into min, max, random string data\n  \n   // output integer between xmin and xmax:\n  \n   function randminmax(xmin,xmax) {\n    return Math.round(Math.random()*(Math.abs(Number(xmax)-Number(xmin))))+Number(xmin)\n  }\n  \n  // Create an array of n *unique* random integers between xmin and xmas\n  \n  function randlistunique(n,xmin,xmax) {\n    var i;\n    var l = [];\n    var x;\n    if (n>xmax-xmin+1) {\n      return \"Error: Length too long for range\"\n    } else {\n  \n    for (i=0; i<n;i++) {\n      x = randminmax(xmin,xmax)\n      while (l.includes(x)) {\n        x = randminmax(xmin,xmax)\n      } \n  \n        l.push(x)\n      \n    }\n    var lstring \n    lstring=l.toString();\n    return lstring\n  }\n  }\n  \n     \n  \n  // Same as randarray, but only generates unique elements in the randomized list\n  const randarrayunique=props.input.map((x1) => ({min: x1.min,max: x1.max,rand: randlistunique(x1.length, x1.min,x1.max)}))\n  \n  \n  // same for unique randoms\n  \n  const rowsunique = randarrayunique.map((x1, x2) => {\n  \n  \n    return (\n      <tr key={x2}>\n        <td>{x1.min}</td>\n        <td>{x1.max}</td>\n        <td>{x1.rand}</td>\n        <td>\n        <button onClick={() => props.deleteRow(x2)}>Delete</button>  \n        </td>\n      </tr>\n    )\n  })\n  \n    return  <tbody>{rowsunique}</tbody>\n  \n    }\n  \n\nlet History = (props) => {\n\n  let { previousLatex, prevoiusAnswers, previousGuesses } = props;\n\n  let outputInFinalUnits = unitConvertor(input, outputUnit, unitsSet);\n  let outputInFinalUnitsFactored = unitConvertorFactored(input, outputUnit, unitsSet);\n\n\n  // Units options\n  let unitsFill = R.map((x) => { if (x.units === 'GN') { return null } else { return (<option key={x.units} value={x.units}>{x.units}</option>) } }, unitsSet);\n\n\n  // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n\n  // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n\n\n\n\n  return (\n    <div>\n       <table>\n          <TableHeader />\n          {/* Why isn't {this.deleteRow} needed here? I think because we've defined both above? */}\n          <TableBodyUnique input={input} deleteRow={deleteRow} uniquetoggle={uniquetoggle} />\n        </table>\n    </div>\n  )\n}\n\nexport default History"]},"metadata":{},"sourceType":"module"}