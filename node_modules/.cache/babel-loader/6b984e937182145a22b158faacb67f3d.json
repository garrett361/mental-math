{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/App.js\";\nimport React, { Component } from 'react'; // Components\n\nimport History from './History';\nimport CurrentQuestion from './CurrentQuestion'; // Importing units and presets\n\nimport unitsSet from './data/unitsSet';\nimport presetsSet from './data/presetsSet';\nlet initialState = {\n  input: [],\n  outputUnit: 'm',\n  GNis1: false,\n  currentNumber: 10,\n  currentAnswer: 10,\n  previousAnswers: [],\n  previousGuesses: [],\n  percentCorrect: 1,\n  currentQuestionType: 0,\n  // Index for question type (multiplicaton, division etc.)\n  randInt: Math.floor(Math.random() * 10) // Random integer between 0 and 9\n\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n    this.questionTypes = 1;\n\n    this.handleSubmit = (number, answer, guesslist, answerlist) => {\n      this.setState({\n        currentNumber: number\n      });\n      this.setState({\n        currentAnswer: answer\n      });\n      this.setState({\n        previousGuesses: [...this.state.previousGuesses, guesslist]\n      });\n      this.setState({\n        previousAnswers: [...this.state.previousAnswers, answerlist]\n      });\n      this.setState({\n        currentQuestionType: Math.floor(Math.random() * this.questionTypes)\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState(initialState);\n    };\n  }\n\n  render() {\n    let {\n      input,\n      outputUnit,\n      GNis1\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, \"Mental Math\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"Simple mental math practice.\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, \"Current Question \", this.state.currentNumber, \" \", this.state.randInt), /*#__PURE__*/React.createElement(CurrentQuestion, {\n      handleSubmit: this.handleSubmit,\n      currentNumber: this.state.currentNumber,\n      currentQuestionType: this.state.currentQuestionType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \"History\"), /*#__PURE__*/React.createElement(History, {\n      input: input,\n      GNis1: GNis1,\n      handleGNis1Toggle: this.handleGNis1Toggle,\n      unitsSet: unitsSet,\n      outputUnit: outputUnit,\n      handleReset: this.handleReset,\n      handleOutputUnitChange: this.handleOutputUnitChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/App.js"],"names":["React","Component","History","CurrentQuestion","unitsSet","presetsSet","initialState","input","outputUnit","GNis1","currentNumber","currentAnswer","previousAnswers","previousGuesses","percentCorrect","currentQuestionType","randInt","Math","floor","random","App","state","questionTypes","handleSubmit","number","answer","guesslist","answerlist","setState","handleReset","render","handleGNis1Toggle","handleOutputUnitChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n\n// Components\nimport History from './History';\nimport CurrentQuestion from './CurrentQuestion';\n\n// Importing units and presets\nimport unitsSet from './data/unitsSet'\nimport presetsSet from './data/presetsSet'\n\n\n\n\nlet initialState = {\n  input: [],\n  outputUnit: 'm',\n  GNis1: false,\n  currentNumber: 10,\n  currentAnswer: 10,\n  previousAnswers: [],\n  previousGuesses: [],\n  percentCorrect: 1,\n  currentQuestionType: 0, // Index for question type (multiplicaton, division etc.)\n  randInt: Math.floor(Math.random()*10), // Random integer between 0 and 9\n};\n\nclass App extends Component {\n\n  state = initialState;\n\n  questionTypes = 1; //Number of different types of questions\n\n  // Code for handling the submit button and appending new data to input list\n\n  handleSubmit = (number, answer, guesslist, answerlist) => {\n    this.setState({ currentNumber: number });\n    this.setState({ currentAnswer: answer });\n    this.setState({ previousGuesses: [...this.state.previousGuesses, guesslist] });\n    this.setState({ previousAnswers: [...this.state.previousAnswers, answerlist] });\n    this.setState({ currentQuestionType: Math.floor(Math.random() * this.questionTypes) });\n  };\n\n  handleReset = () => {\n    this.setState(initialState);\n  };\n\n  render() {\n\n    let { input, outputUnit, GNis1 } = this.state;\n\n    return (\n\n      <div className=\"container\">\n        <h1>\n          Mental Math\n      </h1>\n\n        <p>\n          Simple mental math practice.\n      </p>\n\n        <h2>\n          Current Question {this.state.currentNumber} {this.state.randInt}\n        </h2>\n        <CurrentQuestion\n          handleSubmit={this.handleSubmit}\n          currentNumber={this.state.currentNumber}\n          currentQuestionType={this.state.currentQuestionType} />\n\n        <h3>\n          History\n      </h3>\n        <History\n          input={input}\n          GNis1={GNis1}\n          handleGNis1Toggle={this.handleGNis1Toggle}\n          unitsSet={unitsSet}\n          outputUnit={outputUnit}\n          handleReset={this.handleReset}\n          handleOutputUnitChange={this.handleOutputUnitChange} />\n      </div>\n    )\n  }\n\n}\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}