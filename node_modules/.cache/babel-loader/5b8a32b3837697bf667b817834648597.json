{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/History.js\";\nimport React from 'react'; // Ramda\n\nimport * as R from 'ramda'; // Latex\n\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\nlet History = props => {\n  let {\n    previousLatex,\n    previousAnswers,\n    previousGuesses\n  } = props; // Table Header\n\n  let TableHeader = () => {\n    return /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }\n    }, \"Previous Question\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }\n    }, \"Answer\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    }, \"Guess\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }, \"Error (Abs. Value)\")));\n  }; // Table Fill\n\n\n  let tableFill = previousLatex.map((x, index) => {\n    let percentError = Math.abs(Math.trunc(100 * (previousAnswers[index] - previousGuesses[index]) / previousAnswers[index]));\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, x), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, previousAnswers[index]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, previousGuesses[index]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, percentError, \"%\"));\n  }); // Averaged accuracy\n\n  let errorList = previousAnswers.map((x, index) => {\n    let percentError = Math.abs(Math.trunc(100 * (previousAnswers[index] - previousGuesses[index]) / previousAnswers[index]));\n    return percentError;\n  });\n  let averagedError = Math.trunc(R.reduce(R.add, 0, errorList) / errorList.length);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, tableFill)), !isNaN(averagedError) && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"Overall Error (Abs. Value)\"), /*#__PURE__*/React.createElement(InlineMath, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, averagedError + ' \\\\% \\\\ \\\\mathrm{error} \\\\ \\\\mathrm{on} \\\\ ' + errorList.length + '\\\\ \\\\mathrm{question(s)}')));\n};\n\nexport default History;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/History.js"],"names":["React","R","InlineMath","History","props","previousLatex","previousAnswers","previousGuesses","TableHeader","tableFill","map","x","index","percentError","Math","abs","trunc","errorList","averagedError","reduce","add","length","isNaN"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB,C,CAEA;;AACA,OAAO,0BAAP;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAIA,IAAIC,OAAO,GAAIC,KAAD,IAAW;AAEvB,MAAI;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,eAAjB;AAAkCC,IAAAA;AAAlC,MAAsDH,KAA1D,CAFuB,CAIvB;;AACA,MAAII,WAAW,GAAG,MAAM;AACtB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJF,CADF,CADF;AAUD,GAXD,CALuB,CAkBvB;;;AACA,MAAIC,SAAS,GAAGJ,aAAa,CAACK,GAAd,CAAkB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAE9C,QAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAW,OAAOV,eAAe,CAACM,KAAD,CAAf,GAAyBL,eAAe,CAACK,KAAD,CAA/C,IAA2DN,eAAe,CAACM,KAAD,CAArF,CAAT,CAAnB;AAEA,wBACE;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,CAAL,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKL,eAAe,CAACM,KAAD,CAApB,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKL,eAAe,CAACK,KAAD,CAApB,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,YAAL,MAJF,CADF;AAQD,GAZe,CAAhB,CAnBuB,CAiCvB;;AACA,MAAII,SAAS,GAAGX,eAAe,CAACI,GAAhB,CAAoB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAEhD,QAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAW,OAAOV,eAAe,CAACM,KAAD,CAAf,GAAyBL,eAAe,CAACK,KAAD,CAA/C,IAA2DN,eAAe,CAACM,KAAD,CAArF,CAAT,CAAnB;AAEA,WACEC,YADF;AAGD,GAPe,CAAhB;AASA,MAAIK,aAAa,GAAGJ,IAAI,CAACE,KAAL,CAAWf,CAAC,CAACkB,MAAF,CAASlB,CAAC,CAACmB,GAAX,EAAgB,CAAhB,EAAmBH,SAAnB,IAAgCA,SAAS,CAACI,MAArD,CAApB;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,SADH,CAFF,CAFF,EASG,CAACa,KAAK,CAACJ,aAAD,CAAN,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,eAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaA,aAAa,GAAG,6CAAhB,GAAgED,SAAS,CAACI,MAA1E,GAAmF,0BAAhG,CAFF,CAVJ,CADF;AAqBD,CAlED;;AAuEA,eAAelB,OAAf","sourcesContent":["import React from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n\n\nlet History = (props) => {\n\n  let { previousLatex, previousAnswers, previousGuesses } = props;\n\n  // Table Header\n  let TableHeader = () => {\n    return (\n      <thead>\n        <tr>\n          <th>Previous Question</th>\n          <th>Answer</th>\n          <th>Guess</th>\n          <th>Error (Abs. Value)</th>\n        </tr>\n      </thead>\n    )\n  }\n\n  // Table Fill\n  let tableFill = previousLatex.map((x, index) => {\n\n    let percentError = Math.abs(Math.trunc(100 * (previousAnswers[index] - previousGuesses[index]) / (previousAnswers[index])));\n\n    return (\n      <tr key={index}>\n        <td>{x}</td>\n        <td>{previousAnswers[index]}</td>\n        <td>{previousGuesses[index]}</td>\n        <td>{percentError}%</td>\n      </tr>\n    )\n  })\n\n  // Averaged accuracy\n  let errorList = previousAnswers.map((x, index) => {\n\n    let percentError = Math.abs(Math.trunc(100 * (previousAnswers[index] - previousGuesses[index]) / (previousAnswers[index])));\n\n    return (\n      percentError\n    )\n  });\n\n  let averagedError = Math.trunc(R.reduce(R.add, 0, errorList) / errorList.length);\n\n  return (\n    <div>\n\n      <table>\n        <TableHeader />\n        <tbody>\n          {tableFill}\n        </tbody>\n      </table>\n\n      {!isNaN(averagedError) &&\n        <div>\n          <h3>Overall Error (Abs. Value)</h3>\n          <InlineMath>{averagedError + ' \\\\% \\\\ \\\\mathrm{error} \\\\ \\\\mathrm{on} \\\\ ' + errorList.length + '\\\\ \\\\mathrm{question(s)}'}</InlineMath>\n        </div>\n      }\n\n    </div>\n\n  )\n\n}\n\n\n\n\nexport default History"]},"metadata":{},"sourceType":"module"}