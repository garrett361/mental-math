{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/CurrentQuestion.js\";\nimport React, { Component } from 'react'; // Ramda\n\nimport * as R from 'ramda'; // Latex\n\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\nlet initialState = {\n  guess: null,\n  answer: null\n};\n\nclass CurrentQuestion extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleChange = event => {\n      let {\n        name,\n        value\n      } = event.target; // The [ ] brackets here are the setState synatx\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.questionType = (currentNumber, randInt, qtype) => {\n      // Multiplication\n      if (qtype == 0) {\n        let factorMax = 250; // Max possible mult. factor\n\n        let randFactor = Math.floor(randInt * factorMax);\n        let answer = currentNumber * randFactor;\n        let latex = /*#__PURE__*/React.createElement(InlineMath, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }\n        }, randFactor + ' \\\\times ' + currentNumber);\n        return [answer, latex];\n      }\n    };\n  }\n\n  render() {\n    let {\n      guess\n    } = this.state;\n    let {\n      handleSubmit,\n      currentNumber,\n      currentQuestionType,\n      randInt\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, this.questionType(currentNumber, randInt, currentQuestionType)[1]), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, \"Guess\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"guess\",\n      id: \"guess\",\n      value: guess || '',\n      onChange: this.handleChange,\n      autoFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Submit\",\n      onClick: () => {\n        if (guess !== 0) {\n          handleSubmit(this.questionType(currentNumber, randInt, currentQuestionType)[0], this.state.guess, this.questionType(currentNumber, randInt, currentQuestionType)[0]);\n          this.setState(initialState);\n        } else {\n          alert('Please enter a number/non-zero overall exponent');\n          this.setState(initialState);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, \"Answer\"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, currentNumber));\n  }\n\n}\n\nexport default CurrentQuestion;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/CurrentQuestion.js"],"names":["React","Component","R","InlineMath","initialState","guess","answer","CurrentQuestion","state","handleChange","event","name","value","target","setState","questionType","currentNumber","randInt","qtype","factorMax","randFactor","Math","floor","latex","render","handleSubmit","currentQuestionType","props","alert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n\n\nlet initialState = {\n    guess: null,\n    answer: null,\n};\n\nclass CurrentQuestion extends Component {\n\n    state = initialState;\n\n\n    handleChange = event => {\n        let { name, value } = event.target\n        // The [ ] brackets here are the setState synatx\n        this.setState({\n            [name]: value,\n        })\n    };\n\n    questionType = (currentNumber, randInt, qtype) => {\n        // Multiplication\n        if (qtype == 0) {\n            let factorMax = 250; // Max possible mult. factor\n            let randFactor = Math.floor(randInt * factorMax);\n            let answer = currentNumber * randFactor;\n            let latex = <InlineMath>\n                {randFactor + ' \\\\times ' + currentNumber}\n          </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        }\n    };\n\n    render() {\n\n        let { guess } = this.state;\n        let { handleSubmit, currentNumber, currentQuestionType,randInt } = this.props;\n\n\n\n        return (\n\n            <div>\n\n                <h4>\n                    {this.questionType(currentNumber,randInt, currentQuestionType)[1]}\n                </h4>\n\n                <form>\n\n\n\n                    <label>Guess</label>\n                    <input\n                        type=\"number\"\n                        name=\"guess\"\n                        id=\"guess\"\n                        value={guess || ''}\n                        onChange={this.handleChange}\n                        autoFocus />\n\n\n                </form>\n\n                <input\n                    type=\"button\"\n                    value=\"Submit\"\n                    onClick={() => {\n                        if (guess !== 0) {\n                            handleSubmit(\n                                this.questionType(currentNumber,randInt, currentQuestionType)[0],\n                                this.state.guess,\n                                this.questionType(currentNumber,randInt, currentQuestionType)[0],\n                            );\n                            this.setState(initialState);\n                        }\n                        else {\n                            alert('Please enter a number/non-zero overall exponent');\n                            this.setState(initialState);\n                        }\n                    }\n                    }\n                />\n\n                <h2>Answer</h2>\n\n                <h4>{currentNumber}</h4>\n\n            </div>\n        );\n    };\n\n}\n\n\nexport default CurrentQuestion"]},"metadata":{},"sourceType":"module"}