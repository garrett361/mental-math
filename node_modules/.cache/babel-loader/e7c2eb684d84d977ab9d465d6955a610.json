{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/CurrentQuestion.js\";\nimport React, { Component } from 'react'; // Ramda\n\nimport * as R from 'ramda';\nlet initialState = {\n  guess: null\n};\n\nclass CurrentQuestion extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleChange = event => {\n      let {\n        name,\n        value\n      } = event.target; // The [ ] brackets here are the setState synatx\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.questionType = (currentNumber, x) => {\n      // Multiplication\n      if (x == 0) {\n        let factorMax = 250; // Max possible mult. factor\n\n        let randFactor = Math.floor(Math.random() * factorMax);\n        let answer = currentNumber * randFactor;\n        return answer;\n      }\n    };\n  }\n\n  render() {\n    let {\n      guess\n    } = this.state;\n    let {\n      handleSubmit,\n      currentNumber,\n      currentQuestionType\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }, \"Guess\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"guess\",\n      id: \"guess\",\n      value: guess || '',\n      onChange: this.handleChange,\n      autoFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Submit\",\n      onClick: () => {\n        if (guess !== 0) {\n          handleSubmit(this.questionType(currentQuestionType), this.state.guess, this.state.guess, this.state.guess);\n          this.setState(initialState);\n        } else {\n          alert('Please enter a number/non-zero overall exponent');\n          this.setState(initialState);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"Answer\"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, currentNumber));\n  }\n\n}\n\nexport default CurrentQuestion;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/CurrentQuestion.js"],"names":["React","Component","R","initialState","guess","CurrentQuestion","state","handleChange","event","name","value","target","setState","questionType","currentNumber","x","factorMax","randFactor","Math","floor","random","answer","render","handleSubmit","currentQuestionType","props","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AAIA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE;AADQ,CAAnB;;AAIA,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEpCK,KAFoC,GAE5BH,YAF4B;;AAAA,SAKpCI,YALoC,GAKrBC,KAAK,IAAI;AACpB,UAAI;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBF,KAAK,CAACG,MAA5B,CADoB,CAEpB;;AACA,WAAKC,QAAL,CAAc;AACV,SAACH,IAAD,GAAQC;AADE,OAAd;AAGH,KAXmC;;AAAA,SAapCG,YAboC,GAarB,CAACC,aAAD,EAAgBC,CAAhB,KAAsB;AACjC;AACA,UAAIA,CAAC,IAAI,CAAT,EAAY;AACR,YAAIC,SAAS,GAAC,GAAd,CADQ,CACW;;AACnB,YAAIC,UAAU,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAeJ,SAA1B,CAAf;AACA,YAAIK,MAAM,GAAGP,aAAa,GAACG,UAA3B;AACA,eAAQI,MAAR;AACH;AACJ,KArBmC;AAAA;;AAuBpCC,EAAAA,MAAM,GAAG;AAEL,QAAI;AAAElB,MAAAA;AAAF,QAAY,KAAKE,KAArB;AACA,QAAI;AAAEiB,MAAAA,YAAF;AAAgBT,MAAAA,aAAhB;AAA+BU,MAAAA;AAA/B,QAAuD,KAAKC,KAAhE;AAIA,wBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,eAII;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,EAAE,EAAC,OAHP;AAII,MAAA,KAAK,EAAErB,KAAK,IAAI,EAJpB;AAKI,MAAA,QAAQ,EAAE,KAAKG,YALnB;AAMI,MAAA,SAAS,MANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAFJ,eAiBI;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,KAAK,EAAC,QAFV;AAGI,MAAA,OAAO,EAAE,MAAM;AACX,YAAIH,KAAK,KAAK,CAAd,EAAiB;AACbmB,UAAAA,YAAY,CACR,KAAKV,YAAL,CAAkBW,mBAAlB,CADQ,EAER,KAAKlB,KAAL,CAAWF,KAFH,EAGR,KAAKE,KAAL,CAAWF,KAHH,EAIR,KAAKE,KAAL,CAAWF,KAJH,CAAZ;AAMA,eAAKQ,QAAL,CAAcT,YAAd;AACH,SARD,MASK;AACDuB,UAAAA,KAAK,CAAC,iDAAD,CAAL;AACA,eAAKd,QAAL,CAAcT,YAAd;AACH;AACJ,OAjBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBJ,eAsCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtCJ,eAwCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKW,aAAL,CAxCJ,CAFJ;AA8CH;;AA5EmC;;AAiFxC,eAAeT,eAAf","sourcesContent":["import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n\n\nlet initialState = {\n    guess: null,\n};\n\nclass CurrentQuestion extends Component {\n\n    state = initialState;\n\n\n    handleChange = event => {\n        let { name, value } = event.target\n        // The [ ] brackets here are the setState synatx\n        this.setState({\n            [name]: value,\n        })\n    };\n\n    questionType = (currentNumber, x) => {\n        // Multiplication\n        if (x == 0) {\n            let factorMax=250; // Max possible mult. factor\n            let randFactor=Math.floor(Math.random()* factorMax);\n            let answer = currentNumber*randFactor;\n            return (answer);\n        }\n    };\n\n    render() {\n\n        let { guess } = this.state;\n        let { handleSubmit, currentNumber, currentQuestionType } = this.props;\n\n\n\n        return (\n\n            <div>\n\n                <form>\n\n\n                    <label>Guess</label>\n                    <input\n                        type=\"number\"\n                        name=\"guess\"\n                        id=\"guess\"\n                        value={guess || ''}\n                        onChange={this.handleChange}\n                        autoFocus />\n\n\n                </form>\n\n                <input\n                    type=\"button\"\n                    value=\"Submit\"\n                    onClick={() => {\n                        if (guess !== 0) {\n                            handleSubmit(\n                                this.questionType(currentQuestionType),\n                                this.state.guess,\n                                this.state.guess,\n                                this.state.guess\n                            );\n                            this.setState(initialState);\n                        }\n                        else {\n                            alert('Please enter a number/non-zero overall exponent');\n                            this.setState(initialState);\n                        }\n                    }\n                    }\n                />\n\n                <h2>Answer</h2>\n\n                <h4>{currentNumber}</h4>\n\n            </div>\n        );\n    };\n\n}\n\n\nexport default CurrentQuestion"]},"metadata":{},"sourceType":"module"}