{"ast":null,"code":"import _defineProperty from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';// Ramda\nimport*as R from'ramda';// Latex\nimport'katex/dist/katex.min.css';import{InlineMath}from'react-katex';var initialState={guess:null};var CurrentQuestion=/*#__PURE__*/function(_Component){_inherits(CurrentQuestion,_Component);var _super=_createSuper(CurrentQuestion);function CurrentQuestion(){var _this;_classCallCheck(this,CurrentQuestion);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state=initialState;_this.handleChange=function(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;// The [ ] brackets here are the setState synatx\n_this.setState(_defineProperty({},name,value));};_this.questionType=function(randInt1,randInt2,qtype){// Multiplication\nif(qtype==0){var factorMax=100;// Max possible mult. factor\nvar randFactor1=Math.floor(randInt1*factorMax);var randFactor2=Math.floor(randInt2*factorMax);var answer=randFactor1*randFactor2;var latex=/*#__PURE__*/React.createElement(InlineMath,null,randFactor1+' \\\\times '+randFactor2);return[answer,latex];};// Division\nif(qtype==1){var numMax=100;// Max possible numerato. factor\nvar denomMax=10;// Max possible denominator factor\nvar _randFactor=Math.floor(randInt1*numMax);var _randFactor2=Math.floor(randInt2*denomMax);var _answer=Math.round(_randFactor/_randFactor2);var _latex=/*#__PURE__*/React.createElement(InlineMath,null,'\\\\frac{'+_randFactor+'}{ '+_randFactor2+'}');return[_answer,_latex];};// Addition\nif(qtype==2){var numMax1=1000;// Max possible factor 1\nvar numMax2=1000;// Max possible factor 2\nvar _randFactor3=Math.floor(randInt1*numMax1);var _randFactor4=Math.floor(randInt2*numMax2);var _answer2=Math.round(_randFactor3+_randFactor4);var _latex2=/*#__PURE__*/React.createElement(InlineMath,null,_randFactor3+' + '+_randFactor4);return[_answer2,_latex2];};// Subtraction\nif(qtype==3){var _numMax=1000;// Max possible factor 1\nvar _numMax2=1000;// Max possible factor 2\nvar _randFactor5=Math.floor(randInt1*_numMax);var _randFactor6=Math.floor(randInt2*_numMax2);var _answer3=Math.round(_randFactor5-_randFactor6);var _latex3=/*#__PURE__*/React.createElement(InlineMath,null,_randFactor5+' - '+_randFactor6);return[_answer3,_latex3];};// Percentages\nif(qtype==4){var percentFactor=Math.round(randInt1*20)*5;var _numMax3=100;// Max possible factor 2\nvar randFactor=Math.floor(randInt2*_numMax3);var _answer4=Math.round(percentFactor/100*randFactor);var _latex4=/*#__PURE__*/React.createElement(InlineMath,null,percentFactor+' \\\\% \\\\ \\\\mathrm{of} \\\\ '+randFactor);return[_answer4,_latex4];};};_this.handleGuess=function(e){e.preventDefault();var _this$props=_this.props,handleSubmit=_this$props.handleSubmit,currentQuestionType=_this$props.currentQuestionType,randInt1=_this$props.randInt1,randInt2=_this$props.randInt2;var guess=_this.state.guess;if(guess){handleSubmit(_this.state.guess,_this.questionType(randInt1,randInt2,currentQuestionType)[0],_this.questionType(randInt1,randInt2,currentQuestionType)[1]);_this.setState(initialState);}else{alert('Please enter a number');_this.setState(initialState);}};return _this;}_createClass(CurrentQuestion,[{key:\"render\",value:function render(){var guess=this.state.guess;var _this$props2=this.props,currentQuestionType=_this$props2.currentQuestionType,randInt1=_this$props2.randInt1,randInt2=_this$props2.randInt2;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h4\",null,this.questionType(randInt1,randInt2,currentQuestionType)[1]),/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.handleGuess},/*#__PURE__*/React.createElement(\"label\",null,\"Guess\"),/*#__PURE__*/React.createElement(\"input\",{type:\"number\",name:\"guess\",id:\"guess\",value:guess||'',onChange:this.handleChange//Make enter key same action as submit button\n,autoFocus:true}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Submit\")));}}]);return CurrentQuestion;}(Component);export default CurrentQuestion;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/CurrentQuestion.js"],"names":["React","Component","R","InlineMath","initialState","guess","CurrentQuestion","state","handleChange","event","target","name","value","setState","questionType","randInt1","randInt2","qtype","factorMax","randFactor1","Math","floor","randFactor2","answer","latex","numMax","denomMax","round","numMax1","numMax2","percentFactor","randFactor","handleGuess","e","preventDefault","props","handleSubmit","currentQuestionType","alert"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n\n\nlet initialState = {\n    guess: null,\n};\n\nclass CurrentQuestion extends Component {\n\n    state = initialState;\n\n\n    handleChange = event => {\n        let { name, value } = event.target\n        // The [ ] brackets here are the setState synatx\n        this.setState({\n            [name]: value,\n        })\n    };\n\n    questionType = (randInt1, randInt2, qtype) => {\n\n        // Multiplication\n        if (qtype == 0) {\n            let factorMax = 100; // Max possible mult. factor\n            let randFactor1 = Math.floor(randInt1 * factorMax);\n            let randFactor2 = Math.floor(randInt2 * factorMax);\n            let answer = randFactor1 * randFactor2;\n            let latex = <InlineMath>\n                {randFactor1 + ' \\\\times ' + randFactor2}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n\n        // Division\n        if (qtype == 1) {\n            let numMax = 100; // Max possible numerato. factor\n            let denomMax = 10; // Max possible denominator factor\n            let randFactor1 = Math.floor(randInt1 * numMax);\n            let randFactor2 = Math.floor(randInt2 * denomMax);\n            let answer = Math.round(randFactor1 / randFactor2);\n            let latex = <InlineMath>\n                {'\\\\frac{' + randFactor1 + '}{ ' + randFactor2 + '}'}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n\n        // Addition\n        if (qtype == 2) {\n            let numMax1 = 1000; // Max possible factor 1\n            let numMax2 = 1000; // Max possible factor 2\n            let randFactor1 = Math.floor(randInt1 * numMax1);\n            let randFactor2 = Math.floor(randInt2 * numMax2);\n            let answer = Math.round(randFactor1 + randFactor2);\n            let latex = <InlineMath>\n                {randFactor1 + ' + ' + randFactor2}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n\n        // Subtraction\n        if (qtype == 3) {\n            let numMax1 = 1000; // Max possible factor 1\n            let numMax2 = 1000; // Max possible factor 2\n            let randFactor1 = Math.floor(randInt1 * numMax1);\n            let randFactor2 = Math.floor(randInt2 * numMax2);\n            let answer = Math.round(randFactor1 - randFactor2);\n            let latex = <InlineMath>\n                {randFactor1 + ' - ' + randFactor2}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n        // Percentages\n        if (qtype == 4) {\n            let percentFactor = Math.round(randInt1 * 20) * 5;\n            let numMax = 100; // Max possible factor 2\n            let randFactor = Math.floor(randInt2 * numMax);\n            let answer = Math.round((percentFactor/100) * randFactor);\n            let latex = <InlineMath>\n                {percentFactor + ' \\\\% \\\\ \\\\mathrm{of} \\\\ ' + randFactor}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n\n\n    };\n\n\n    handleGuess = (e) => {\n        e.preventDefault();\n        let { handleSubmit, currentQuestionType, randInt1, randInt2 } = this.props;\n        let { guess } = this.state;\n        if (guess) {\n            handleSubmit(\n                this.state.guess,\n                this.questionType(randInt1, randInt2, currentQuestionType)[0],\n                this.questionType(randInt1, randInt2, currentQuestionType)[1],\n            );\n            this.setState(initialState);\n        }\n        else {\n            alert('Please enter a number');\n            this.setState(initialState);\n        }\n    }\n\n    render() {\n\n        let { guess } = this.state;\n        let { currentQuestionType, randInt1, randInt2 } = this.props;\n\n\n        return (\n\n            <div>\n\n                <h4>\n                    {this.questionType(randInt1, randInt2, currentQuestionType)[1]}\n                </h4>\n\n                <form onSubmit={this.handleGuess}>\n\n                    <label>Guess</label>\n                    <input\n                        type=\"number\"\n                        name=\"guess\"\n                        id=\"guess\"\n                        value={guess || ''}\n                        onChange={this.handleChange}   //Make enter key same action as submit button\n                        autoFocus />\n                    <button type=\"submit\">Submit</button>\n\n                </form>\n\n\n\n\n            </div>\n        );\n    };\n\n}\n\n\nexport default CurrentQuestion"]},"metadata":{},"sourceType":"module"}