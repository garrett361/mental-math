{"ast":null,"code":"import _toConsumableArray from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/home/garrett/GitHub/mental-math/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';// Components\nimport History from'./History';import CurrentQuestion from'./CurrentQuestion';var initialState={previousLatex:[],previousAnswers:[],previousGuesses:[],currentQuestionType:0,// Index for question type (multiplicaton, division etc.)\nrandInt1:Math.random(),// Random integer between 0 and 1\nrandInt2:Math.random()// Random integer between 0 and 1\n};var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state=initialState;_this.questionTypes=5;_this.handleSubmit=function(guesslist,answerlist,latex){_this.setState({previousGuesses:[].concat(_toConsumableArray(_this.state.previousGuesses),[guesslist])});_this.setState({previousAnswers:[].concat(_toConsumableArray(_this.state.previousAnswers),[answerlist])});_this.setState({previousLatex:[].concat(_toConsumableArray(_this.state.previousLatex),[latex])});_this.setState({currentQuestionType:Math.floor(Math.random()*_this.questionTypes)});_this.setState({randInt1:Math.random()});_this.setState({randInt2:Math.random()});};_this.handleReset=function(){_this.setState(initialState);};return _this;}_createClass(App,[{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,input=_this$state.input,outputUnit=_this$state.outputUnit,GNis1=_this$state.GNis1;return/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Mental Math\"),/*#__PURE__*/React.createElement(\"p\",null,\"Simple mental math practice.\"),/*#__PURE__*/React.createElement(\"h2\",null,\"Current Question\"),/*#__PURE__*/React.createElement(CurrentQuestion,{handleSubmit:this.handleSubmit,currentQuestionType:this.state.currentQuestionType,randInt1:this.state.randInt1,randInt2:this.state.randInt2}),/*#__PURE__*/React.createElement(\"h3\",null,\"History\"),/*#__PURE__*/React.createElement(History,{previousLatex:this.state.previousLatex,previousAnswers:this.state.previousAnswers,previousGuesses:this.state.previousGuesses}),/*#__PURE__*/React.createElement(\"input\",{type:\"button\",value:\"Reset\",onClick:function onClick(){_this2.handleReset();}}),/*#__PURE__*/React.createElement(\"input\",{type:\"button\",value:\"State\",onClick:function onClick(){{console.log(_this2.state);};}}));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/App.js"],"names":["React","Component","History","CurrentQuestion","initialState","previousLatex","previousAnswers","previousGuesses","currentQuestionType","randInt1","Math","random","randInt2","App","state","questionTypes","handleSubmit","guesslist","answerlist","latex","setState","floor","handleReset","input","outputUnit","GNis1","console","log"],"mappings":"2uBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAGA;AACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CAIA,GAAIC,CAAAA,YAAY,CAAG,CACjBC,aAAa,CAAE,EADE,CAEjBC,eAAe,CAAE,EAFA,CAGjBC,eAAe,CAAE,EAHA,CAIjBC,mBAAmB,CAAE,CAJJ,CAIO;AACxBC,QAAQ,CAAEC,IAAI,CAACC,MAAL,EALO,CAKQ;AACzBC,QAAQ,CAAEF,IAAI,CAACC,MAAL,EAAe;AANR,CAAnB,C,GASME,CAAAA,G,+SAEJC,K,CAAQV,Y,OAERW,a,CAAgB,C,OAIhBC,Y,CAAe,SAACC,SAAD,CAAYC,UAAZ,CAAwBC,KAAxB,CAAkC,CAC/C,MAAKC,QAAL,CAAc,CAAEb,eAAe,8BAAM,MAAKO,KAAL,CAAWP,eAAjB,GAAkCU,SAAlC,EAAjB,CAAd,EACA,MAAKG,QAAL,CAAc,CAAEd,eAAe,8BAAM,MAAKQ,KAAL,CAAWR,eAAjB,GAAkCY,UAAlC,EAAjB,CAAd,EACA,MAAKE,QAAL,CAAc,CAAEf,aAAa,8BAAM,MAAKS,KAAL,CAAWT,aAAjB,GAAgCc,KAAhC,EAAf,CAAd,EACA,MAAKC,QAAL,CAAc,CAAEZ,mBAAmB,CAAEE,IAAI,CAACW,KAAL,CAAWX,IAAI,CAACC,MAAL,GAAgB,MAAKI,aAAhC,CAAvB,CAAd,EACA,MAAKK,QAAL,CAAc,CAAEX,QAAQ,CAAEC,IAAI,CAACC,MAAL,EAAZ,CAAd,EACA,MAAKS,QAAL,CAAc,CAAER,QAAQ,CAAEF,IAAI,CAACC,MAAL,EAAZ,CAAd,EACD,C,OAEDW,W,CAAc,UAAM,CAClB,MAAKF,QAAL,CAAchB,YAAd,EACD,C,sEAEQ,iCAE4B,KAAKU,KAFjC,CAEDS,KAFC,aAEDA,KAFC,CAEMC,UAFN,aAEMA,UAFN,CAEkBC,KAFlB,aAEkBA,KAFlB,CAGP,mBAGE,2BAAK,SAAS,CAAC,WAAf,eACE,4CADF,cAKE,4DALF,cASE,iDATF,cAYE,oBAAC,eAAD,EACE,YAAY,CAAE,KAAKT,YADrB,CAEE,mBAAmB,CAAE,KAAKF,KAAL,CAAWN,mBAFlC,CAGE,QAAQ,CAAE,KAAKM,KAAL,CAAWL,QAHvB,CAIE,QAAQ,CAAE,KAAKK,KAAL,CAAWF,QAJvB,EAZF,cAkBE,wCAlBF,cAsBE,oBAAC,OAAD,EACE,aAAa,CAAE,KAAKE,KAAL,CAAWT,aAD5B,CAEE,eAAe,CAAE,KAAKS,KAAL,CAAWR,eAF9B,CAGE,eAAe,CAAE,KAAKQ,KAAL,CAAWP,eAH9B,EAtBF,cA4BE,6BACE,IAAI,CAAC,QADP,CAEE,KAAK,CAAC,OAFR,CAGE,OAAO,CAAE,kBAAM,CACb,MAAI,CAACe,WAAL,GACD,CALH,EA5BF,cAqCE,6BACE,IAAI,CAAC,QADP,CAEE,KAAK,CAAC,OAFR,CAGE,OAAO,CAAE,kBAAM,CACb,CAAEI,OAAO,CAACC,GAAR,CAAY,MAAI,CAACb,KAAjB,EAAyB,EAC5B,CALH,EArCF,CAHF,CAoDD,C,iBA5Eeb,S,EAmFlB,cAAeY,CAAAA,GAAf","sourcesContent":["import React, { Component } from 'react'\n\n\n// Components\nimport History from './History';\nimport CurrentQuestion from './CurrentQuestion';\n\n\n\nlet initialState = {\n  previousLatex: [],\n  previousAnswers: [],\n  previousGuesses: [],\n  currentQuestionType: 0, // Index for question type (multiplicaton, division etc.)\n  randInt1: Math.random(), // Random integer between 0 and 1\n  randInt2: Math.random(), // Random integer between 0 and 1\n};\n\nclass App extends Component {\n\n  state = initialState;\n\n  questionTypes = 5; //Number of different types of questions; see CurrentQuestions\n\n  // Code for handling the submit button and appending new data to input list\n\n  handleSubmit = (guesslist, answerlist, latex) => {\n    this.setState({ previousGuesses: [...this.state.previousGuesses, guesslist] });\n    this.setState({ previousAnswers: [...this.state.previousAnswers, answerlist] });\n    this.setState({ previousLatex: [...this.state.previousLatex, latex] });\n    this.setState({ currentQuestionType: Math.floor(Math.random() * this.questionTypes) });\n    this.setState({ randInt1: Math.random() });\n    this.setState({ randInt2: Math.random() });\n  };\n\n  handleReset = () => {\n    this.setState(initialState);\n  };\n\n  render() {\n\n    let { input, outputUnit, GNis1 } = this.state;\n    return (\n\n\n      <div className=\"container\">\n        <h1>\n          Mental Math\n      </h1>\n\n        <p>\n          Simple mental math practice.\n      </p>\n\n        <h2>\n          Current Question\n        </h2>\n        <CurrentQuestion\n          handleSubmit={this.handleSubmit}\n          currentQuestionType={this.state.currentQuestionType}\n          randInt1={this.state.randInt1}\n          randInt2={this.state.randInt2} />\n\n        <h3>\n          History\n      </h3>\n\n        <History\n          previousLatex={this.state.previousLatex}\n          previousAnswers={this.state.previousAnswers}\n          previousGuesses={this.state.previousGuesses}\n        />\n\n        <input\n          type=\"button\"\n          value=\"Reset\"\n          onClick={() => {\n            this.handleReset();\n          }\n          }\n        />\n\n        <input\n          type=\"button\"\n          value=\"State\"\n          onClick={() => {\n            { console.log(this.state) };\n          }\n          }\n        />\n\n\n      </div>\n    )\n  }\n\n}\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}