{"ast":null,"code":"// set of units, all re-expressed in terms of a meters value and a power\n// meterValue and meterExponent determined by writing 1m=[meterValue]*[units]^[meterExponent]\n// Roughly grouped by unit type (energy, length, volume, etc) in increasing size order.  Could probably improve this\nlet unitsSet = [{\n  units: 'meV',\n  meterExponent: -1,\n  meterValue: 5.06 * 10 ** 3\n}, {\n  units: 'eV',\n  meterExponent: -1,\n  meterValue: 5.06 * 10 ** 6\n}, {\n  units: 'keV',\n  meterExponent: -1,\n  meterValue: 5.06 * 10 ** 9\n}, {\n  units: 'MeV',\n  meterExponent: -1,\n  meterValue: 5.06 * 10 ** 12\n}, {\n  units: 'GeV',\n  meterExponent: -1,\n  meterValue: 5.06 * 10 ** 15\n}, {\n  units: 'gauss',\n  meterExponent: -1 / 2,\n  meterValue: 389777.816\n}, {\n  units: 'tesla',\n  meterExponent: -1 / 2,\n  meterValue: 38977781.6\n}, {\n  units: 'erg',\n  meterExponent: -1,\n  meterValue: 3.16 * 10 ** 18\n}, {\n  units: 'J',\n  meterExponent: -1,\n  meterValue: 3.16 * 10 ** 25\n}, {\n  units: 'K',\n  meterExponent: -1,\n  meterValue: 436\n}, {\n  units: 'Å',\n  meterExponent: 1,\n  meterValue: 10 ** 10\n}, {\n  units: 'nm',\n  meterExponent: 1,\n  meterValue: 10 ** 9\n}, {\n  units: 'cm',\n  meterExponent: 1,\n  meterValue: 100\n}, {\n  units: 'ft',\n  meterExponent: 1,\n  meterValue: 3.28\n}, {\n  units: 'm',\n  meterExponent: 1,\n  meterValue: 1\n}, {\n  units: 'km',\n  meterExponent: 1,\n  meterValue: 1 / 1000\n}, {\n  units: 'mi',\n  meterExponent: 1,\n  meterValue: .000621371192\n}, {\n  units: 'au',\n  meterExponent: 1,\n  meterValue: 6.68 * 10 ** -12\n}, {\n  units: 'ly',\n  meterExponent: 1,\n  meterValue: 1 / (9.46 * 10 ** 15)\n}, {\n  units: 'pc',\n  meterExponent: 1,\n  meterValue: 1 / (3.086 * 10 ** 16)\n}, {\n  units: 'Mpc',\n  meterExponent: 1,\n  meterValue: 1 / (3.086 * 10 ** 22)\n}, {\n  units: 'b',\n  meterExponent: .5,\n  meterValue: 1 * 10 ** 14\n}, {\n  units: 's',\n  meterExponent: 1,\n  meterValue: 3.33 * 10 ** -9\n}, {\n  units: 'days',\n  meterExponent: 1,\n  meterValue: 3.86 * 10 ** -14\n}, {\n  units: 'years',\n  meterExponent: 1,\n  meterValue: 1.06 * 10 ** -16\n}, {\n  units: 'Hz',\n  meterExponent: -1,\n  meterValue: 3.3356 * 10 ** -9\n}, {\n  units: 'MHz',\n  meterExponent: -1,\n  meterValue: 0.00333564095\n}, {\n  units: 'GHz',\n  meterExponent: -1,\n  meterValue: 3.33564095\n}, {\n  units: 'g',\n  meterExponent: -1,\n  meterValue: 1 / (3.52 * 10 ** -40)\n}, {\n  units: 'lb',\n  meterExponent: -1,\n  meterValue: 1.29 * 10 ** 42\n}, {\n  units: 'kg',\n  meterExponent: -1,\n  meterValue: 1 / (3.52 * 10 ** -43)\n}, {\n  units: 'ton',\n  meterExponent: -1,\n  meterValue: 2.58 * 10 ** 45\n}, {\n  units: 'tsp',\n  meterExponent: 1 / 3,\n  meterValue: 58.7601231\n}, {\n  units: 'Tbsp',\n  meterExponent: 1 / 3,\n  meterValue: 40.7419938\n}, {\n  units: 'fl. oz.',\n  meterExponent: 1 / 3,\n  meterValue: 32.3369419\n}, {\n  units: 'cups',\n  meterExponent: 1 / 3,\n  meterValue: 16.168471\n}, {\n  units: 'pints',\n  meterExponent: 1 / 3,\n  meterValue: 12.8329239\n}, {\n  units: 'quarts',\n  meterExponent: 1 / 3,\n  meterValue: 10.1854985\n}, {\n  units: 'liters',\n  meterExponent: 1 / 3,\n  meterValue: 10\n}, {\n  units: 'gallons',\n  meterExponent: 1 / 3,\n  meterValue: 6.41646195\n}, {\n  units: 'GN',\n  meterExponent: .5,\n  meterValue: 6.41 * 10 ** 34\n}];\nexport default unitsSet;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/data/unitsSet.js"],"names":["unitsSet","units","meterExponent","meterValue"],"mappings":"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","sourcesContent":["// set of units, all re-expressed in terms of a meters value and a power\n// meterValue and meterExponent determined by writing 1m=[meterValue]*[units]^[meterExponent]\n// Roughly grouped by unit type (energy, length, volume, etc) in increasing size order.  Could probably improve this\nlet unitsSet = [\n\n  {\n    units: 'meV',\n    meterExponent: -1,\n    meterValue: 5.06 * 10 ** 3,\n  },\n  {\n    units: 'eV',\n    meterExponent: -1,\n    meterValue: 5.06 * 10 ** 6,\n  },\n  {\n    units: 'keV',\n    meterExponent: -1,\n    meterValue: 5.06 * 10 ** 9,\n  },\n  {\n    units: 'MeV',\n    meterExponent: -1,\n    meterValue: 5.06 * 10 ** 12,\n  },\n  {\n    units: 'GeV',\n    meterExponent: -1,\n    meterValue: 5.06 * 10 ** 15,\n  },\n  {\n    units: 'gauss',\n    meterExponent: -1 / 2,\n    meterValue: 389777.816,\n  },\n  {\n    units: 'tesla',\n    meterExponent: -1 / 2,\n    meterValue: 38977781.6,\n  },\n  {\n    units: 'erg',\n    meterExponent: -1,\n    meterValue: 3.16 * 10 ** 18,\n  },\n  {\n    units: 'J',\n    meterExponent: -1,\n    meterValue: 3.16 * 10 ** 25,\n  },\n  {\n    units: 'K',\n    meterExponent: -1,\n    meterValue: 436,\n  },\n  {\n    units: 'Å',\n    meterExponent: 1,\n    meterValue: 10 ** 10,\n  },\n  {\n    units: 'nm',\n    meterExponent: 1,\n    meterValue: 10 ** 9,\n  },\n  {\n    units: 'cm',\n    meterExponent: 1,\n    meterValue: 100,\n  },\n  {\n    units: 'ft',\n    meterExponent: 1,\n    meterValue: 3.28,\n  },\n  {\n    units: 'm',\n    meterExponent: 1,\n    meterValue: 1,\n  },\n  {\n    units: 'km',\n    meterExponent: 1,\n    meterValue: 1 / 1000,\n  },\n  {\n    units: 'mi',\n    meterExponent: 1,\n    meterValue: .000621371192,\n  },\n  {\n    units: 'au',\n    meterExponent: 1,\n    meterValue: 6.68 * 10 ** (-12),\n  },\n  {\n    units: 'ly',\n    meterExponent: 1,\n    meterValue: 1 / (9.46 * 10 ** 15),\n  },\n  {\n    units: 'pc',\n    meterExponent: 1,\n    meterValue: 1 / (3.086 * 10 ** 16),\n  },\n  {\n    units: 'Mpc',\n    meterExponent: 1,\n    meterValue: 1 / (3.086 * 10 ** 22),\n  },\n  {\n    units: 'b',\n    meterExponent: .5,\n    meterValue: 1 * 10 ** 14,\n  },\n  {\n    units: 's',\n    meterExponent: 1,\n    meterValue: 3.33 * 10 ** (-9),\n  },\n  {\n    units: 'days',\n    meterExponent: 1,\n    meterValue: 3.86 * 10 ** (-14),\n  },\n  {\n    units: 'years',\n    meterExponent: 1,\n    meterValue: 1.06 * 10 ** (-16),\n  },\n  {\n    units: 'Hz',\n    meterExponent: -1,\n    meterValue: 3.3356 * 10 ** (-9),\n  },\n  {\n    units: 'MHz',\n    meterExponent: -1,\n    meterValue: 0.00333564095,\n  },\n  {\n    units: 'GHz',\n    meterExponent: -1,\n    meterValue: 3.33564095,\n  },\n  {\n    units: 'g',\n    meterExponent: -1,\n    meterValue: 1 / (3.52 * 10 ** (-40)),\n  },\n  {\n    units: 'lb',\n    meterExponent: -1,\n    meterValue: 1.29 * 10 ** 42,\n  },\n  {\n    units: 'kg',\n    meterExponent: -1,\n    meterValue: 1 / (3.52 * 10 ** (-43)),\n  },\n  {\n    units: 'ton',\n    meterExponent: -1,\n    meterValue: 2.58 * 10 ** 45,\n  },\n  {\n    units: 'tsp',\n    meterExponent: 1 / 3,\n    meterValue: 58.7601231,\n  },\n  {\n    units: 'Tbsp',\n    meterExponent: 1 / 3,\n    meterValue: 40.7419938,\n  },\n  {\n    units: 'fl. oz.',\n    meterExponent: 1 / 3,\n    meterValue: 32.3369419,\n  },\n  {\n    units: 'cups',\n    meterExponent: 1 / 3,\n    meterValue: 16.168471,\n  },\n  {\n    units: 'pints',\n    meterExponent: 1 / 3,\n    meterValue: 12.8329239,\n  },\n  {\n    units: 'quarts',\n    meterExponent: 1 / 3,\n    meterValue: 10.1854985,\n  },\n  {\n    units: 'liters',\n    meterExponent: 1 / 3,\n    meterValue: 10,\n  },\n  {\n    units: 'gallons',\n    meterExponent: 1 / 3,\n    meterValue: 6.41646195,\n  },\n  {\n    units: 'GN',\n    meterExponent: .5,\n    meterValue: 6.41 * 10 ** 34,\n  }\n];\n\nexport default unitsSet;"]},"metadata":{},"sourceType":"module"}