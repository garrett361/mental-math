{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/History.js\";\nimport React from 'react'; // Ramda\n\nimport * as R from 'ramda'; // Latex\n\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\nlet History = props => {\n  let {\n    previousLatex,\n    prevoiusAnswers,\n    previousGuesses\n  } = props;\n  let outputInFinalUnits = unitConvertor(input, outputUnit, unitsSet);\n  let outputInFinalUnitsFactored = unitConvertorFactored(input, outputUnit, unitsSet); // Units options\n\n  let unitsFill = R.map(x => {\n    if (x.units === 'GN') {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: x.units,\n        value: x.units,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 87\n        }\n      }, x.units);\n    }\n  }, unitsSet); // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default History;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/History.js"],"names":["React","R","InlineMath","History","props","previousLatex","prevoiusAnswers","previousGuesses","outputInFinalUnits","unitConvertor","input","outputUnit","unitsSet","outputInFinalUnitsFactored","unitConvertorFactored","unitsFill","map","x","units"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB,C,CAEA;;AACA,OAAO,0BAAP;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAIA,IAAIC,OAAO,GAAIC,KAAD,IAAW;AAEvB,MAAI;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,eAAjB;AAAkCC,IAAAA;AAAlC,MAAsDH,KAA1D;AAEA,MAAII,kBAAkB,GAAGC,aAAa,CAACC,KAAD,EAAQC,UAAR,EAAoBC,QAApB,CAAtC;AACA,MAAIC,0BAA0B,GAAGC,qBAAqB,CAACJ,KAAD,EAAQC,UAAR,EAAoBC,QAApB,CAAtD,CALuB,CAQvB;;AACA,MAAIG,SAAS,GAAGd,CAAC,CAACe,GAAF,CAAOC,CAAD,IAAO;AAAE,QAAIA,CAAC,CAACC,KAAF,KAAY,IAAhB,EAAsB;AAAE,aAAO,IAAP;AAAa,KAArC,MAA2C;AAAE,0BAAQ;AAAQ,QAAA,GAAG,EAAED,CAAC,CAACC,KAAf;AAAsB,QAAA,KAAK,EAAED,CAAC,CAACC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuCD,CAAC,CAACC,KAAzC,CAAR;AAAmE;AAAE,GAAjI,EAAmIN,QAAnI,CAAhB,CATuB,CAYvB;;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAID,CArBD;;AAuBA,eAAeT,OAAf","sourcesContent":["import React from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n\n\nlet History = (props) => {\n\n  let { previousLatex, prevoiusAnswers, previousGuesses } = props;\n\n  let outputInFinalUnits = unitConvertor(input, outputUnit, unitsSet);\n  let outputInFinalUnitsFactored = unitConvertorFactored(input, outputUnit, unitsSet);\n\n\n  // Units options\n  let unitsFill = R.map((x) => { if (x.units === 'GN') { return null } else { return (<option key={x.units} value={x.units}>{x.units}</option>) } }, unitsSet);\n\n\n  // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n\n\n\n\n  return (\n    <div>\n    </div>\n  )\n}\n\nexport default History"]},"metadata":{},"sourceType":"module"}