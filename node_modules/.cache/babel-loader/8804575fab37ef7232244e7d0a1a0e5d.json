{"ast":null,"code":"var _jsxFileName = \"/home/garrett/GitHub/mental-math/src/InputForm.js\";\nimport React, { Component } from 'react'; // Ramda\n\nimport * as R from 'ramda';\nlet initialState = {\n  number: null,\n  units: null,\n  unitsExponent: 1,\n  meterExponent: null,\n  meterValue: null,\n  overallExponent: 1\n};\n\nclass InputForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleChange = event => {\n      let {\n        name,\n        value\n      } = event.target; // The [ ] brackets here are the setState synatx\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleUnitsChange = event => {\n      let {\n        value\n      } = event.target; // find which  unit was selected\n\n      let unitsIndex = R.findIndex(R.propEq('units', value))(this.props.unitsSet);\n      let chosenUnit = this.props.unitsSet[unitsIndex];\n      this.setState({\n        units: chosenUnit.units,\n        meterExponent: chosenUnit.meterExponent,\n        meterValue: chosenUnit.meterValue\n      });\n    };\n  }\n\n  render() {\n    let {\n      number,\n      units,\n      unitsExponent,\n      overallExponent\n    } = this.state;\n    let {\n      handleSubmit,\n      unitsSet\n    } = this.props; // Units options\n\n    let unitsFill = R.map(x => {\n      if (x.units === 'GN') {\n        return null;\n      } else {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: x.units,\n          value: x.units,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 84\n          }\n        }, x.units);\n      }\n    }, unitsSet);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"Number\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"number\",\n      id: \"number\",\n      value: number || '',\n      onChange: this.handleChange,\n      autoFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, \"Units \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"units\",\n      id: \"units\",\n      value: units || '',\n      onChange: this.handleUnitsChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }), unitsFill), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"Unit Exponent\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"unitsExponent\",\n      id: \"unitsExponent\",\n      value: unitsExponent || '',\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \"Overall Exponent\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"overallExponent\",\n      id: \"overallExponent\",\n      value: overallExponent,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Submit\",\n      onClick: () => {\n        if (number && Number(overallExponent) !== 0) {\n          handleSubmit(this.state);\n          this.setState(initialState);\n        } else {\n          alert('Please enter a number/non-zero overall exponent');\n          this.setState(initialState);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Clear\",\n      onClick: () => {\n        this.setState(initialState);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default InputForm;","map":{"version":3,"sources":["/home/garrett/GitHub/mental-math/src/InputForm.js"],"names":["React","Component","R","initialState","number","units","unitsExponent","meterExponent","meterValue","overallExponent","InputForm","state","handleChange","event","name","value","target","setState","handleUnitsChange","unitsIndex","findIndex","propEq","props","unitsSet","chosenUnit","render","handleSubmit","unitsFill","map","x","Number","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AAIA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,aAAa,EAAE,CAHE;AAIjBC,EAAAA,aAAa,EAAE,IAJE;AAKjBC,EAAAA,UAAU,EAAE,IALK;AAMjBC,EAAAA,eAAe,EAAE;AANA,CAAnB;;AASA,MAAMC,SAAN,SAAwBT,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCU,KAFgC,GAExBR,YAFwB;;AAAA,SAMhCS,YANgC,GAMjBC,KAAK,IAAI;AACtB,UAAI;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBF,KAAK,CAACG,MAA5B,CADsB,CAEtB;;AACA,WAAKC,QAAL,CAAc;AACZ,SAACH,IAAD,GAAQC;AADI,OAAd;AAGD,KAZ+B;;AAAA,SAehCG,iBAfgC,GAeZL,KAAK,IAAI;AAC3B,UAAI;AAAEE,QAAAA;AAAF,UAAYF,KAAK,CAACG,MAAtB,CAD2B,CAE3B;;AACA,UAAIG,UAAU,GAAGjB,CAAC,CAACkB,SAAF,CAAYlB,CAAC,CAACmB,MAAF,CAAS,OAAT,EAAkBN,KAAlB,CAAZ,EAAsC,KAAKO,KAAL,CAAWC,QAAjD,CAAjB;AACA,UAAIC,UAAU,GAAG,KAAKF,KAAL,CAAWC,QAAX,CAAoBJ,UAApB,CAAjB;AACA,WAAKF,QAAL,CAAc;AACZZ,QAAAA,KAAK,EAAEmB,UAAU,CAACnB,KADN;AAEZE,QAAAA,aAAa,EAAEiB,UAAU,CAACjB,aAFd;AAGZC,QAAAA,UAAU,EAAEgB,UAAU,CAAChB;AAHX,OAAd;AAKD,KAzB+B;AAAA;;AA4BhCiB,EAAAA,MAAM,GAAG;AAEP,QAAI;AAAErB,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA,aAAjB;AAAgCG,MAAAA;AAAhC,QAAoD,KAAKE,KAA7D;AACA,QAAI;AAAEe,MAAAA,YAAF;AAAgBH,MAAAA;AAAhB,QAA6B,KAAKD,KAAtC,CAHO,CAMP;;AACA,QAAIK,SAAS,GAAGzB,CAAC,CAAC0B,GAAF,CAAOC,CAAD,IAAO;AAAE,UAAGA,CAAC,CAACxB,KAAF,KAAU,IAAb,EAAmB;AAAC,eAAO,IAAP;AAAY,OAAhC,MAAsC;AAAE,4BAAQ;AAAQ,UAAA,GAAG,EAAEwB,CAAC,CAACxB,KAAf;AAAsB,UAAA,KAAK,EAAEwB,CAAC,CAACxB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAuCwB,CAAC,CAACxB,KAAzC,CAAR;AAAmE;AAAC,KAA3H,EAA6HkB,QAA7H,CAAhB;AAGA,wBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,EAAE,EAAC,QAHL;AAIE,MAAA,KAAK,EAAEnB,MAAM,IAAI,EAJnB;AAKE,MAAA,QAAQ,EAAE,KAAKQ,YALjB;AAME,MAAA,SAAS,MANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,eAeE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,EAAE,EAAC,OAFL;AAGE,MAAA,KAAK,EAAEP,KAAK,IAAI,EAHlB;AAIE,MAAA,QAAQ,EAAE,KAAKa,iBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME;AAAQ,MAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOGS,SAPH,CAfF,eAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAzBF,eA0BE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAC,eAFP;AAGE,MAAA,EAAE,EAAC,eAHL;AAIE,MAAA,KAAK,EAAErB,aAAa,IAAI,EAJ1B;AAKE,MAAA,QAAQ,EAAE,KAAKM,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BF,eAkCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAlCF,eAmCE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAC,iBAFP;AAGE,MAAA,EAAE,EAAC,iBAHL;AAIE,MAAA,KAAK,EAAEH,eAJT;AAKE,MAAA,QAAQ,EAAE,KAAKG,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCF,CADF,eA8CE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAC,QAFR;AAGE,MAAA,OAAO,EAAE,MAAM;AACb,YAAIR,MAAM,IAAI0B,MAAM,CAACrB,eAAD,CAAN,KAA0B,CAAxC,EAA2C;AACzCiB,UAAAA,YAAY,CACV,KAAKf,KADK,CAAZ;AAGA,eAAKM,QAAL,CAAcd,YAAd;AACD,SALD,MAMK;AACH4B,UAAAA,KAAK,CAAC,iDAAD,CAAL;AACA,eAAKd,QAAL,CAAcd,YAAd;AACD;AACF,OAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9CF,eA+DE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAC,OAFR;AAGE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKc,QAAL,CAAcd,YAAd;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/DF,CAFF;AA4ED;;AAlH+B;;AAuHlC,eAAeO,SAAf","sourcesContent":["import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n\n\nlet initialState = {\n  number: null,\n  units: null,\n  unitsExponent: 1,\n  meterExponent: null,\n  meterValue: null,\n  overallExponent: 1,\n};\n\nclass InputForm extends Component {\n\n  state = initialState;\n\n  // code for handling changes\n\n  handleChange = event => {\n    let { name, value } = event.target\n    // The [ ] brackets here are the setState synatx\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  // Special code for units\n  handleUnitsChange = event => {\n    let { value } = event.target\n    // find which  unit was selected\n    let unitsIndex = R.findIndex(R.propEq('units', value))(this.props.unitsSet);\n    let chosenUnit = this.props.unitsSet[unitsIndex]\n    this.setState({\n      units: chosenUnit.units,\n      meterExponent: chosenUnit.meterExponent,\n      meterValue: chosenUnit.meterValue,\n    })\n  }\n\n\n  render() {\n\n    let { number, units, unitsExponent, overallExponent } = this.state;\n    let { handleSubmit, unitsSet } = this.props;\n\n\n    // Units options\n    let unitsFill = R.map((x) => { if(x.units==='GN') {return null} else { return (<option key={x.units} value={x.units}>{x.units}</option>) }}, unitsSet);\n    \n\n    return (\n\n      <div>\n        <form>\n\n\n          <label>Number</label>\n          <input\n            type=\"number\"\n            name=\"number\"\n            id=\"number\"\n            value={number || ''}\n            onChange={this.handleChange}\n            autoFocus />\n\n\n\n          <label>Units </label>\n          <select\n            name=\"units\"\n            id=\"units\"\n            value={units || ''}\n            onChange={this.handleUnitsChange}\n          >\n            <option value=\"\"></option>\n            {unitsFill}\n          </select>\n\n          <label>Unit Exponent</label>\n          <input\n            type=\"number\"\n            name=\"unitsExponent\"\n            id=\"unitsExponent\"\n            value={unitsExponent || ''}\n            onChange={this.handleChange}\n          />\n\n          <label>Overall Exponent</label>\n          <input\n            type=\"number\"\n            name=\"overallExponent\"\n            id=\"overallExponent\"\n            value={overallExponent}\n            onChange={this.handleChange}\n          />\n\n        </form>\n\n        <input\n          type=\"button\"\n          value=\"Submit\"\n          onClick={() => {\n            if (number && Number(overallExponent)!==0) {\n              handleSubmit(\n                this.state\n              );\n              this.setState(initialState);\n            }\n            else {\n              alert('Please enter a number/non-zero overall exponent');\n              this.setState(initialState);\n            }\n          }\n          }\n        />\n        <input\n          type=\"button\"\n          value=\"Clear\"\n          onClick={() => {\n            this.setState(initialState);\n          }}\n        />\n\n\n      </div>\n    )\n  }\n\n}\n\n\nexport default InputForm"]},"metadata":{},"sourceType":"module"}