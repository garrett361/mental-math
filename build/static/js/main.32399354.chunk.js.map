{"version":3,"sources":["History.js","CurrentQuestion.js","App.js","index.js"],"names":["History","props","previousLatex","previousAnswers","previousGuesses","TableHeader","tableFill","map","x","index","percentError","Math","abs","trunc","key","errorList","averagedError","R","length","isNaN","initialState","guess","CurrentQuestion","state","handleChange","event","target","name","value","setState","questionType","randInt1","randInt2","qtype","randFactor1","floor","randFactor2","round","percentFactor","randFactor","handleGuess","e","preventDefault","handleSubmit","currentQuestionType","alert","this","onSubmit","type","id","onChange","autoFocus","Component","random","App","questionTypes","guesslist","answerlist","latex","handleReset","input","outputUnit","GNis1","className","onClick","console","log","ReactDOM","render","document","getElementById"],"mappings":"gSAkFeA,EAvED,SAACC,GAAW,IAElBC,EAAoDD,EAApDC,cAAeC,EAAqCF,EAArCE,gBAAiBC,EAAoBH,EAApBG,gBAGlCC,EAAc,WAChB,OACE,+BACE,4BACE,iDACA,sCACA,qCACA,qDAOJC,EAAYJ,EAAcK,KAAI,SAACC,EAAGC,GAEpC,IAAIC,EAAeC,KAAKC,IAAID,KAAKE,MAAM,KAAOV,EAAgBM,GAASL,EAAgBK,IAAWN,EAAgBM,KAElH,OACE,wBAAIK,IAAKL,GACP,4BAAKD,GACL,4BAAKL,EAAgBM,IACrB,4BAAKL,EAAgBK,IACrB,4BAAKC,EAAL,SAMFK,EAAYZ,EAAgBI,KAAI,SAACC,EAAGC,GAItC,OAFmBE,KAAKC,IAAID,KAAKE,MAAM,KAAOV,EAAgBM,GAASL,EAAgBK,IAAWN,EAAgBM,QAOhHO,EAAgBL,KAAKE,MAAMI,IAASA,IAAO,EAAGF,IAAcA,EAAUG,OAE1E,OACE,6BAEE,+BACE,kBAACb,EAAD,MACA,+BACGC,KAIHa,MAAMH,IACN,6BACE,0DACA,kBAAC,aAAD,KAAaA,EAAgB,8CAAgDD,EAAUG,OAAS,+B,QC1DtGE,EAAe,CACfC,MAAO,MA2JIC,E,4MAtJXC,MAAQH,E,EAGRI,aAAe,SAAAC,GAAU,IAAD,EACEA,EAAMC,OAAtBC,EADc,EACdA,KAAMC,EADQ,EACRA,MAEZ,EAAKC,SAAL,eACKF,EAAOC,K,EAIhBE,aAAe,SAACC,EAAUC,EAAUC,GAGhC,GAAa,GAATA,EAAY,CACZ,IACIC,EAAcvB,KAAKwB,MADP,IACaJ,GACzBK,EAAczB,KAAKwB,MAFP,IAEaH,GAK7B,MACI,CALSE,EAAcE,EACf,kBAAC,aAAD,KACPF,EAAc,YAAcE,IASrC,GAAa,GAATH,EAAY,CACZ,IAEIC,EAAcvB,KAAKwB,MAFV,IAEgBJ,GACzBK,EAAczB,KAAKwB,MAFR,GAEcH,GAK7B,MACI,CALSrB,KAAK0B,MAAMH,EAAcE,GAC1B,kBAAC,aAAD,KACP,UAAYF,EAAc,MAAQE,EAAc,MASzD,GAAa,GAATH,EAAY,CACZ,IAEIC,EAAcvB,KAAKwB,MAFT,IAEeJ,GACzBK,EAAczB,KAAKwB,MAFT,IAEeH,GAK7B,MACI,CALSrB,KAAK0B,MAAMH,EAAcE,GAC1B,kBAAC,aAAD,KACPF,EAAc,MAAQE,IAS/B,GAAa,GAATH,EAAY,CACZ,IAEIC,EAAcvB,KAAKwB,MAFT,IAEeJ,GACzBK,EAAczB,KAAKwB,MAFT,IAEeH,GAK7B,MACI,CALSrB,KAAK0B,MAAMH,EAAcE,GAC1B,kBAAC,aAAD,KACPF,EAAc,MAAQE,IAQ/B,GAAa,GAATH,EAAY,CACZ,IAAIK,EAA4C,EAA5B3B,KAAK0B,MAAiB,GAAXN,GAE3BQ,EAAa5B,KAAKwB,MADT,IACeH,GAK5B,MACI,CALSrB,KAAK0B,MAAOC,EAAc,IAAOC,GAClC,kBAAC,aAAD,KACPD,EAAgB,2BAA6BC,M,EAY1DC,YAAc,SAACC,GACXA,EAAEC,iBADe,MAE+C,EAAKzC,MAA/D0C,EAFW,EAEXA,aAAcC,EAFH,EAEGA,oBAAqBb,EAFxB,EAEwBA,SAAUC,EAFlC,EAEkCA,SACnC,EAAKT,MAAfF,OAEFsB,EACI,EAAKpB,MAAMF,MACX,EAAKS,aAAaC,EAAUC,EAAUY,GAAqB,GAC3D,EAAKd,aAAaC,EAAUC,EAAUY,GAAqB,IAE/D,EAAKf,SAAST,KAGdyB,MAAM,yBACN,EAAKhB,SAAST,K,uDAIZ,IAEAC,EAAUyB,KAAKvB,MAAfF,MAFD,EAG6CyB,KAAK7C,MAAjD2C,EAHD,EAGCA,oBAAqBb,EAHtB,EAGsBA,SAAUC,EAHhC,EAGgCA,SAGrC,OAEI,6BAEI,4BACKc,KAAKhB,aAAaC,EAAUC,EAAUY,GAAqB,IAGhE,0BAAMG,SAAUD,KAAKN,aAEjB,wCACA,2BACIQ,KAAK,SACLrB,KAAK,QACLsB,GAAG,QACHrB,MAAOP,GAAS,GAChB6B,SAAUJ,KAAKtB,aACf2B,WAAS,IACb,4BAAQH,KAAK,UAAb,gB,GA1IUI,aCN1BhC,EAAe,CACjBlB,cAAe,GACfC,gBAAiB,GACjBC,gBAAiB,GACjBwC,oBAAqB,EACrBb,SAAUpB,KAAK0C,SACfrB,SAAUrB,KAAK0C,UAsFFC,E,4MAjFb/B,MAAQH,E,EAERmC,cAAgB,E,EAIhBZ,aAAe,SAACa,EAAWC,EAAYC,GACrC,EAAK7B,SAAS,CAAEzB,gBAAgB,GAAD,mBAAM,EAAKmB,MAAMnB,iBAAjB,CAAkCoD,MACjE,EAAK3B,SAAS,CAAE1B,gBAAgB,GAAD,mBAAM,EAAKoB,MAAMpB,iBAAjB,CAAkCsD,MACjE,EAAK5B,SAAS,CAAE3B,cAAc,GAAD,mBAAM,EAAKqB,MAAMrB,eAAjB,CAAgCwD,MAC7D,EAAK7B,SAAS,CAAEe,oBAAqBjC,KAAKwB,MAAMxB,KAAK0C,SAAW,EAAKE,iBACrE,EAAK1B,SAAS,CAAEE,SAAUpB,KAAK0C,WAC/B,EAAKxB,SAAS,CAAEG,SAAUrB,KAAK0C,Y,EAGjCM,YAAc,WACZ,EAAK9B,SAAST,I,uDAGN,IAAD,SAE4B0B,KAAKvB,MAFjC,EAEDqC,MAFC,EAEMC,WAFN,EAEkBC,MACzB,OAGE,yBAAKC,UAAU,aACb,2CAIA,2DAIA,gDAGA,kBAAC,EAAD,CACEpB,aAAcG,KAAKH,aACnBC,oBAAqBE,KAAKvB,MAAMqB,oBAChCb,SAAUe,KAAKvB,MAAMQ,SACrBC,SAAUc,KAAKvB,MAAMS,WAEvB,uCAIA,kBAAC,EAAD,CACE9B,cAAe4C,KAAKvB,MAAMrB,cAC1BC,gBAAiB2C,KAAKvB,MAAMpB,gBAC5BC,gBAAiB0C,KAAKvB,MAAMnB,kBAG9B,2BACE4C,KAAK,SACLpB,MAAM,QACNoC,QAAS,WACP,EAAKL,iBAKT,2BACEX,KAAK,SACLpB,MAAM,QACNoC,QAAS,WACLC,QAAQC,IAAI,EAAK3C,e,GApEb6B,aCTlBe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.32399354.chunk.js","sourcesContent":["import React from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n\n\nlet History = (props) => {\n\n  let { previousLatex, previousAnswers, previousGuesses } = props;\n\n  // Table Header\n  let TableHeader = () => {\n    return (\n      <thead>\n        <tr>\n          <th>Previous Question</th>\n          <th>Answer</th>\n          <th>Guess</th>\n          <th>Error (Abs. Value)</th>\n        </tr>\n      </thead>\n    )\n  }\n\n  // Table Fill\n  let tableFill = previousLatex.map((x, index) => {\n\n    let percentError = Math.abs(Math.trunc(100 * (previousAnswers[index] - previousGuesses[index]) / (previousAnswers[index])));\n\n    return (\n      <tr key={index}>\n        <td>{x}</td>\n        <td>{previousAnswers[index]}</td>\n        <td>{previousGuesses[index]}</td>\n        <td>{percentError}%</td>\n      </tr>\n    )\n  })\n\n  // Averaged accuracy\n  let errorList = previousAnswers.map((x, index) => {\n\n    let percentError = Math.abs(Math.trunc(100 * (previousAnswers[index] - previousGuesses[index]) / (previousAnswers[index])));\n\n    return (\n      percentError\n    )\n  });\n\n  let averagedError = Math.trunc(R.reduce(R.add, 0, errorList)) / errorList.length;\n\n  return (\n    <div>\n\n      <table>\n        <TableHeader />\n        <tbody>\n          {tableFill}\n        </tbody>\n      </table>\n\n      {!isNaN(averagedError) &&\n        <div>\n          <h3>Overall Error (Abs. Value)</h3>\n          <InlineMath>{averagedError + ' \\\\% \\\\ \\\\mathrm{error} \\\\ \\\\mathrm{on} \\\\ ' + errorList.length + '\\\\ \\\\mathrm{question(s)}'}</InlineMath>\n        </div>\n      }\n\n    </div>\n\n  )\n\n}\n\n\n\n\nexport default History","import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n\n\nlet initialState = {\n    guess: null,\n};\n\nclass CurrentQuestion extends Component {\n\n    state = initialState;\n\n\n    handleChange = event => {\n        let { name, value } = event.target\n        // The [ ] brackets here are the setState synatx\n        this.setState({\n            [name]: value,\n        })\n    };\n\n    questionType = (randInt1, randInt2, qtype) => {\n\n        // Multiplication\n        if (qtype == 0) {\n            let factorMax = 100; // Max possible mult. factor\n            let randFactor1 = Math.floor(randInt1 * factorMax);\n            let randFactor2 = Math.floor(randInt2 * factorMax);\n            let answer = randFactor1 * randFactor2;\n            let latex = <InlineMath>\n                {randFactor1 + ' \\\\times ' + randFactor2}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n\n        // Division\n        if (qtype == 1) {\n            let numMax = 100; // Max possible numerato. factor\n            let denomMax = 10; // Max possible denominator factor\n            let randFactor1 = Math.floor(randInt1 * numMax);\n            let randFactor2 = Math.floor(randInt2 * denomMax);\n            let answer = Math.round(randFactor1 / randFactor2);\n            let latex = <InlineMath>\n                {'\\\\frac{' + randFactor1 + '}{ ' + randFactor2 + '}'}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n\n        // Addition\n        if (qtype == 2) {\n            let numMax1 = 1000; // Max possible factor 1\n            let numMax2 = 1000; // Max possible factor 2\n            let randFactor1 = Math.floor(randInt1 * numMax1);\n            let randFactor2 = Math.floor(randInt2 * numMax2);\n            let answer = Math.round(randFactor1 + randFactor2);\n            let latex = <InlineMath>\n                {randFactor1 + ' + ' + randFactor2}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n\n        // Subtraction\n        if (qtype == 3) {\n            let numMax1 = 1000; // Max possible factor 1\n            let numMax2 = 1000; // Max possible factor 2\n            let randFactor1 = Math.floor(randInt1 * numMax1);\n            let randFactor2 = Math.floor(randInt2 * numMax2);\n            let answer = Math.round(randFactor1 - randFactor2);\n            let latex = <InlineMath>\n                {randFactor1 + ' - ' + randFactor2}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n        // Percentages\n        if (qtype == 4) {\n            let percentFactor = Math.round(randInt1 * 20) * 5;\n            let numMax = 100; // Max possible factor 2\n            let randFactor = Math.floor(randInt2 * numMax);\n            let answer = Math.round((percentFactor/100) * randFactor);\n            let latex = <InlineMath>\n                {percentFactor + ' \\\\% \\\\ \\\\mathrm{of} \\\\ ' + randFactor}\n            </InlineMath>;\n            return (\n                [answer, latex]\n            );\n        };\n\n\n\n    };\n\n\n    handleGuess = (e) => {\n        e.preventDefault();\n        let { handleSubmit, currentQuestionType, randInt1, randInt2 } = this.props;\n        let { guess } = this.state;\n        if (guess) {\n            handleSubmit(\n                this.state.guess,\n                this.questionType(randInt1, randInt2, currentQuestionType)[0],\n                this.questionType(randInt1, randInt2, currentQuestionType)[1],\n            );\n            this.setState(initialState);\n        }\n        else {\n            alert('Please enter a number');\n            this.setState(initialState);\n        }\n    }\n\n    render() {\n\n        let { guess } = this.state;\n        let { currentQuestionType, randInt1, randInt2 } = this.props;\n\n\n        return (\n\n            <div>\n\n                <h4>\n                    {this.questionType(randInt1, randInt2, currentQuestionType)[1]}\n                </h4>\n\n                <form onSubmit={this.handleGuess}>\n\n                    <label>Guess</label>\n                    <input\n                        type=\"number\"\n                        name=\"guess\"\n                        id=\"guess\"\n                        value={guess || ''}\n                        onChange={this.handleChange}   //Make enter key same action as submit button\n                        autoFocus />\n                    <button type=\"submit\">Submit</button>\n\n                </form>\n\n\n\n\n            </div>\n        );\n    };\n\n}\n\n\nexport default CurrentQuestion","import React, { Component } from 'react'\n\n\n// Components\nimport History from './History';\nimport CurrentQuestion from './CurrentQuestion';\n\n\n\nlet initialState = {\n  previousLatex: [],\n  previousAnswers: [],\n  previousGuesses: [],\n  currentQuestionType: 0, // Index for question type (multiplicaton, division etc.)\n  randInt1: Math.random(), // Random integer between 0 and 1\n  randInt2: Math.random(), // Random integer between 0 and 1\n};\n\nclass App extends Component {\n\n  state = initialState;\n\n  questionTypes = 5; //Number of different types of questions; see CurrentQuestions\n\n  // Code for handling the submit button and appending new data to input list\n\n  handleSubmit = (guesslist, answerlist, latex) => {\n    this.setState({ previousGuesses: [...this.state.previousGuesses, guesslist] });\n    this.setState({ previousAnswers: [...this.state.previousAnswers, answerlist] });\n    this.setState({ previousLatex: [...this.state.previousLatex, latex] });\n    this.setState({ currentQuestionType: Math.floor(Math.random() * this.questionTypes) });\n    this.setState({ randInt1: Math.random() });\n    this.setState({ randInt2: Math.random() });\n  };\n\n  handleReset = () => {\n    this.setState(initialState);\n  };\n\n  render() {\n\n    let { input, outputUnit, GNis1 } = this.state;\n    return (\n\n\n      <div className=\"container\">\n        <h1>\n          Mental Math\n      </h1>\n\n        <p>\n          Simple mental math practice.\n      </p>\n\n        <h2>\n          Current Question\n        </h2>\n        <CurrentQuestion\n          handleSubmit={this.handleSubmit}\n          currentQuestionType={this.state.currentQuestionType}\n          randInt1={this.state.randInt1}\n          randInt2={this.state.randInt2} />\n\n        <h3>\n          History\n      </h3>\n\n        <History\n          previousLatex={this.state.previousLatex}\n          previousAnswers={this.state.previousAnswers}\n          previousGuesses={this.state.previousGuesses}\n        />\n\n        <input\n          type=\"button\"\n          value=\"Reset\"\n          onClick={() => {\n            this.handleReset();\n          }\n          }\n        />\n\n        <input\n          type=\"button\"\n          value=\"State\"\n          onClick={() => {\n            { console.log(this.state) };\n          }\n          }\n        />\n\n\n      </div>\n    )\n  }\n\n}\n\n\n\n\nexport default App;\n","// This is the key file which the html page pulls to render the app.  \n// index.js searches for the \"root\" element in the public/index.html file, which is a div, and renders App.js into it\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n  \n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}